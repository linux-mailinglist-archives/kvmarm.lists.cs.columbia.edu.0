Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id D1F003F026D
	for <lists+kvmarm@lfdr.de>; Wed, 18 Aug 2021 13:13:03 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 472394B0C2;
	Wed, 18 Aug 2021 07:13:03 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -4.201
X-Spam-Level: 
X-Spam-Status: No, score=-4.201 required=6.1 tests=[BAYES_00=-1.9,
	DNS_FROM_AHBL_RHSBL=2.699, RCVD_IN_DNSWL_HI=-5] autolearn=unavailable
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id x9VmCUK5fDqK; Wed, 18 Aug 2021 07:13:03 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 4622D4B09A;
	Wed, 18 Aug 2021 07:12:59 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id BBCF04B086
 for <kvmarm@lists.cs.columbia.edu>; Wed, 18 Aug 2021 07:12:57 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id ToQpmcrUlfEE for <kvmarm@lists.cs.columbia.edu>;
 Wed, 18 Aug 2021 07:12:56 -0400 (EDT)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 92CC94A2E5
 for <kvmarm@lists.cs.columbia.edu>; Wed, 18 Aug 2021 07:12:56 -0400 (EDT)
Received: from disco-boy.misterjones.org (disco-boy.misterjones.org
 [51.254.78.96])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 6ADD06108F;
 Wed, 18 Aug 2021 11:12:55 +0000 (UTC)
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.94.2)
 (envelope-from <maz@kernel.org>)
 id 1mGJV6-005jgS-V1; Wed, 18 Aug 2021 12:12:53 +0100
Date: Wed, 18 Aug 2021 12:12:52 +0100
Message-ID: <87pmubrop7.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Oliver Upton <oupton@google.com>
Subject: Re: [PATCH 3/4] KVM: arm64: Enforce reserved bits for PSCI target
 affinities
In-Reply-To: <20210818085047.1005285-4-oupton@google.com>
References: <20210818085047.1005285-1-oupton@google.com>
 <20210818085047.1005285-4-oupton@google.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: oupton@google.com, kvm@vger.kernel.org,
 kvmarm@lists.cs.columbia.edu, pshier@google.com, ricarkol@google.com,
 jingzhangos@google.com, rananta@google.com, james.morse@arm.com,
 alexandru.elisei@arm.com, suzuki.poulose@arm.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: kvm@vger.kernel.org, Peter Shier <pshier@google.com>,
 Raghavendra Rao Anata <rananta@google.com>, kvmarm@lists.cs.columbia.edu
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Wed, 18 Aug 2021 09:50:46 +0100,
Oliver Upton <oupton@google.com> wrote:
> 
> Some calls in PSCI take a target affinity argument, defined to be
> bit-compatible with the affinity fields in MPIDR_EL1. All other bits in
> the parameter are reserved and must be 0.

For future reference, it may be worth quoting the spec (ARM DEN 0022D,
5.1.4 "CPU_ON").

> Return INVALID_PARAMETERS if the guest incorrectly sets a reserved
> bit.
> 
> Signed-off-by: Oliver Upton <oupton@google.com>
> ---
>  arch/arm64/kvm/psci.c | 20 +++++++++++++++++---
>  1 file changed, 17 insertions(+), 3 deletions(-)
> 
> diff --git a/arch/arm64/kvm/psci.c b/arch/arm64/kvm/psci.c
> index db4056ecccfd..bb76be01abd2 100644
> --- a/arch/arm64/kvm/psci.c
> +++ b/arch/arm64/kvm/psci.c
> @@ -59,6 +59,17 @@ static void kvm_psci_vcpu_off(struct kvm_vcpu *vcpu)
>  	kvm_vcpu_kick(vcpu);
>  }
>  
> +static inline bool kvm_psci_valid_affinity(struct kvm_vcpu *vcpu,
> +					   unsigned long affinity)
> +{
> +	unsigned long mask = MPIDR_HWID_BITMASK;
> +
> +	if (vcpu_mode_is_32bit(vcpu))
> +		mask &= ~((u32) 0);

I don't think we need this anymore since 5.7:

- fdc9999e20cd ("KVM: arm64: PSCI: Forbid 64bit functions for 32bit
  guests") guarantees that the guest can't trick KVM into using the
  SMC64 functions.

- with 2890ac993daa ("KVM: arm64: PSCI: Narrow input registers when
  using 32bit functions"), the registers are always narrowed down to
  32bit

Put the two together, and you can't have a 32bit guest issuing a PSCI
operation with crap in the upper 32bits.

> +
> +	return !(affinity & ~mask);

So the whole helper can now be rewritten as

	return !(affinity & ~MPIDR_HWID_BITMASK);

> +}
> +
>  static unsigned long kvm_psci_vcpu_on(struct kvm_vcpu *source_vcpu)
>  {
>  	struct vcpu_reset_state *reset_state;
> @@ -66,9 +77,9 @@ static unsigned long kvm_psci_vcpu_on(struct kvm_vcpu *source_vcpu)
>  	struct kvm_vcpu *vcpu = NULL;
>  	unsigned long cpu_id;
>  
> -	cpu_id = smccc_get_arg1(source_vcpu) & MPIDR_HWID_BITMASK;
> -	if (vcpu_mode_is_32bit(source_vcpu))
> -		cpu_id &= ~((u32) 0);
> +	cpu_id = smccc_get_arg1(source_vcpu);
> +	if (!kvm_psci_valid_affinity(source_vcpu, cpu_id))
> +		return PSCI_RET_INVALID_PARAMS;
>  
>  	vcpu = kvm_mpidr_to_vcpu(kvm, cpu_id);
>  
> @@ -126,6 +137,9 @@ static unsigned long kvm_psci_vcpu_affinity_info(struct kvm_vcpu *vcpu)
>  	target_affinity = smccc_get_arg1(vcpu);
>  	lowest_affinity_level = smccc_get_arg2(vcpu);
>  
> +	if (!kvm_psci_valid_affinity(vcpu, target_affinity))
> +		return PSCI_RET_INVALID_PARAMS;
> +
>  	/* Determine target affinity mask */
>  	target_affinity_mask = psci_affinity_mask(lowest_affinity_level);
>  	if (!target_affinity_mask)

Otherwise, looks good to me.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
