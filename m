Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 72E165EF7E0
	for <lists+kvmarm@lfdr.de>; Thu, 29 Sep 2022 16:42:34 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 5668943399;
	Thu, 29 Sep 2022 10:42:33 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -1.788
X-Spam-Level: 
X-Spam-Status: No, score=-1.788 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, RCVD_IN_DNSWL_BLOCKED=0.001, T_DKIM_INVALID=0.01,
	URIBL_BLOCKED=0.001] autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id ZQdjbfvZm7SP; Thu, 29 Sep 2022 10:42:33 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id BCA7843482;
	Thu, 29 Sep 2022 10:42:31 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 49552412AF
 for <kvmarm@lists.cs.columbia.edu>; Thu, 29 Sep 2022 10:42:31 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id yJvYRhVxbKkE for <kvmarm@lists.cs.columbia.edu>;
 Thu, 29 Sep 2022 10:42:29 -0400 (EDT)
Received: from ams.source.kernel.org (ams.source.kernel.org [145.40.68.75])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 91A1F40BD9
 for <kvmarm@lists.cs.columbia.edu>; Thu, 29 Sep 2022 10:42:29 -0400 (EDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by ams.source.kernel.org (Postfix) with ESMTPS id A1AE7B824C8;
 Thu, 29 Sep 2022 14:42:27 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 2A439C433B5;
 Thu, 29 Sep 2022 14:42:26 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1664462546;
 bh=/SxFICnb/IGykEy7g4NmdFo3YPCbWRpQuzBLo3gamXk=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=IDWn4g189wiJF2sEazzSwxDePwTVxKdus0rLKsZhsyfH0ONUmiIFt+hwXe2rhA8iD
 w44EmHQhpYByr/Bra4EEHC9HDbM6ABdBVmyT/hJioa5JqJHzfrkgv+rZQAHKrSCjxY
 o/2/qTMPIn62EnJ7zx4isjhv8ErTPXiW/o6nVmhvg3lvABMEFl1+mYrqNdHfBdUiLb
 eohwNnFB1Rd3eEg24gdOqRLZkZQ3wUCD6U9avDRgfUNWAr2zKIjMq79a1GQl1OrGVB
 5uP92eOJDhUZz1SLq0vIZ5VHT4/E+ijDGXo6niXg+80OqeBcBx+6+etpWNWmg+0WH0
 QNI2gLgiaJXNQ==
Received: from sofa.misterjones.org ([185.219.108.64]
 helo=goblin-girl.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.95)
 (envelope-from <maz@kernel.org>) id 1oduk3-00DYne-QI;
 Thu, 29 Sep 2022 15:42:23 +0100
Date: Thu, 29 Sep 2022 15:42:23 +0100
Message-ID: <86fsga6y40.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Gavin Shan <gshan@redhat.com>
Subject: Re: [PATCH v4 3/6] KVM: arm64: Enable ring-based dirty memory tracking
In-Reply-To: <d0beb9bd-5295-adb6-a473-c131d6102947@redhat.com>
References: <20220927005439.21130-1-gshan@redhat.com>
 <20220927005439.21130-4-gshan@redhat.com> <YzMerD8ZvhvnprEN@x1n>
 <86sfkc7mg8.wl-maz@kernel.org> <YzM/DFV1TgtyRfCA@x1n>
 <320005d1-fe88-fd6a-be91-ddb56f1aa80f@redhat.com>
 <87y1u3hpmp.wl-maz@kernel.org> <YzRfkBWepX2CD88h@x1n>
 <d0beb9bd-5295-adb6-a473-c131d6102947@redhat.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: gshan@redhat.com, peterx@redhat.com,
 kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org, catalin.marinas@arm.com,
 bgardon@google.com, shuah@kernel.org, andrew.jones@linux.dev, will@kernel.org,
 dmatlack@google.com, pbonzini@redhat.com, zhenyzha@redhat.com,
 shan.gavin@gmail.com, james.morse@arm.com, suzuki.poulose@arm.com,
 alexandru.elisei@arm.com, oliver.upton@linux.dev
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: kvm@vger.kernel.org, catalin.marinas@arm.com, andrew.jones@linux.dev,
 will@kernel.org, shan.gavin@gmail.com, bgardon@google.com, dmatlack@google.com,
 pbonzini@redhat.com, zhenyzha@redhat.com, shuah@kernel.org,
 kvmarm@lists.cs.columbia.edu
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Thu, 29 Sep 2022 10:50:12 +0100,
Gavin Shan <gshan@redhat.com> wrote:
> 
> Hi Marc and Peter,
> 
> On 9/29/22 12:52 AM, Peter Xu wrote:
> > On Wed, Sep 28, 2022 at 09:25:34AM +0100, Marc Zyngier wrote:
> >> On Wed, 28 Sep 2022 00:47:43 +0100,
> >> Gavin Shan <gshan@redhat.com> wrote:
> >> 
> >>> I have rough idea as below. It's appreciated if you can comment before I'm
> >>> going a head for the prototype. The overall idea is to introduce another
> >>> dirty ring for KVM (kvm-dirty-ring). It's updated and visited separately
> >>> to dirty ring for vcpu (vcpu-dirty-ring).
> >>> 
> >>>     - When the various VGIC/ITS table base addresses are specified, kvm-dirty-ring
> >>>       entries are added to mark those pages as 'always-dirty'. In mark_page_dirty_in_slot(),
> >>>       those 'always-dirty' pages will be skipped, no entries pushed to vcpu-dirty-ring.
> >>> 
> >>>     - Similar to vcpu-dirty-ring, kvm-dirty-ring is accessed from userspace through
> >>>       mmap(kvm->fd). However, there won't have similar reset interface. It means
> >>>       'struct kvm_dirty_gfn::flags' won't track any information as we do for
> >>>       vcpu-dirty-ring. In this regard, kvm-dirty-ring is purely shared buffer to
> >>>       advertise 'always-dirty' pages from host to userspace.
> >>>          - For QEMU, shutdown/suspend/resume cases won't be concerning
> >>> us any more. The
> >>>       only concerned case is migration. When the migration is about to complete,
> >>>       kvm-dirty-ring entries are fetched and the dirty bits are updated to global
> >>>       dirty page bitmap and RAMBlock's dirty page bitmap. For this, I'm still reading
> >>>       the code to find the best spot to do it.
> >> 
> >> I think it makes a lot of sense to have a way to log writes that are
> >> not generated by a vpcu, such as the GIC and maybe other things in the
> >> future, such as DMA traffic (some SMMUs are able to track dirty pages
> >> as well).
> >> 
> >> However, I don't really see the point in inventing a new mechanism for
> >> that. Why don't we simply allow non-vpcu dirty pages to be tracked in
> >> the dirty *bitmap*?
> >> 
> >>  From a kernel perspective, this is dead easy:
> >> 
> >> diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
> >> index 5b064dbadaf4..ae9138f29d51 100644
> >> --- a/virt/kvm/kvm_main.c
> >> +++ b/virt/kvm/kvm_main.c
> >> @@ -3305,7 +3305,7 @@ void mark_page_dirty_in_slot(struct kvm *kvm,
> >>   	struct kvm_vcpu *vcpu = kvm_get_running_vcpu();
> >>     #ifdef CONFIG_HAVE_KVM_DIRTY_RING
> >> -	if (WARN_ON_ONCE(!vcpu) || WARN_ON_ONCE(vcpu->kvm != kvm))
> >> +	if (WARN_ON_ONCE(vcpu && vcpu->kvm != kvm))
> >>   		return;
> >>   #endif
> >>   @@ -3313,10 +3313,11 @@ void mark_page_dirty_in_slot(struct kvm
> >> *kvm,
> >>   		unsigned long rel_gfn = gfn - memslot->base_gfn;
> >>   		u32 slot = (memslot->as_id << 16) | memslot->id;
> >>   -		if (kvm->dirty_ring_size)
> >> +		if (vpcu && kvm->dirty_ring_size)
> >>   			kvm_dirty_ring_push(&vcpu->dirty_ring,
> >>   					    slot, rel_gfn);
> >> -		else
> >> +		/* non-vpcu dirtying ends up in the global bitmap */
> >> +		if (!vcpu && memslot->dirty_bitmap)
> >>   			set_bit_le(rel_gfn, memslot->dirty_bitmap);
> >>   	}
> >>   }
> >> 
> >> though I'm sure there is a few more things to it.
> > 
> > Yes, currently the bitmaps are not created when rings are enabled.
> > kvm_prepare_memory_region() has:
> > 
> > 		else if (!kvm->dirty_ring_size) {
> > 			r = kvm_alloc_dirty_bitmap(new);
> > 
> > But I think maybe that's a solution worth considering.  Using the rings
> > have a major challenge on the limitation of ring size, so that for e.g. an
> > ioctl we need to make sure the pages to dirty within an ioctl procedure
> > will not be more than the ring can take.  Using dirty bitmap for a last
> > phase sync of constant (but still very small amount of) dirty pages does
> > sound reasonable and can avoid that complexity.  The payoff is we'll need
> > to allocate both the rings and the bitmaps.
> > 
> 
> Ok. I was thinking of using the bitmap to convey the dirty pages for
> this particular case, where we don't have running vcpu. The concern I had
> is the natural difference between a ring and bitmap. The ring-buffer is
> discrete, comparing to bitmap. Besides, it sounds a little strange to
> have two different sets of meta-data to track the data (dirty pages).

The problem is that the dirty ring mechanism is a bit blinkered, and
cannot consider a source of dirty pages other than from the vcpus.

> However, bitmap is easier way than per-vm ring. The constrains with
> per-vm ring is just as Peter pointed. So lets reuse the bitmap to
> convey the dirty pages for this particular case. I think the payoff,
> extra bitmap, is acceptable. For this, we need another capability
> (KVM_CAP_DIRTY_LOG_RING_BITMAP?) so that QEMU can collects the dirty
> bitmap in the last phase of migration.

Why another capability? Just allowing dirty logging to be enabled
before we saving the GIC state should be enough, shouldn't it?

> If all of us agree on this, I can send another kernel patch to address
> this. QEMU still need more patches so that the feature can be supported.

Yes, this will also need some work.

> >> 
> >> To me, this is just a relaxation of an arbitrary limitation, as the
> >> current assumption that only vcpus can dirty memory doesn't hold at
> >> all.
> > 
> > The initial dirty ring proposal has a per-vm ring, but after we
> > investigated x86 we found that all legal dirty paths are with a vcpu
> > context (except one outlier on kvmgt which fixed within itself), so we
> > dropped the per-vm ring.
> > 
> > One thing to mention is that DMAs should not count in this case because
> > that's from device perspective, IOW either IOMMU or SMMU dirty tracking
> > should be reported to the device driver that interacts with the userspace
> > not from KVM interfaces (e.g. vfio with VFIO_IOMMU_DIRTY_PAGES).  That even
> > includes emulated DMA like vhost (VHOST_SET_LOG_BASE).
> > 
> 
> Thanks to Peter for mentioning the per-vm ring's history. As I said above,
> lets use bitmap instead if all of us agree.
> 
> If I'm correct, Marc may be talking about SMMU, which is emulated in host
> instead of QEMU. In this case, the DMA target pages are similar to those
> pages for vgic/its tables. Both sets of pages are invisible from QEMU.

No, I'm talking about an actual HW SMMU using the HTTU feature that
set the Dirty bit in the PTEs. And people have been working on sharing
SMMU and CPU PTs for some time, which would give us the one true
source of dirty page.

In this configuration, the dirty ring mechanism will be pretty useless.

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
