Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id BEC12562031
	for <lists+kvmarm@lfdr.de>; Thu, 30 Jun 2022 18:23:33 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id A91B94B3D9;
	Thu, 30 Jun 2022 12:23:32 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -1.789
X-Spam-Level: 
X-Spam-Status: No, score=-1.789 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, T_DKIM_INVALID=0.01, URIBL_BLOCKED=0.001]
	autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id jzCnjBhaT+vV; Thu, 30 Jun 2022 12:23:32 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 1E19F4B125;
	Thu, 30 Jun 2022 12:23:31 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id BBBCC4B125
 for <kvmarm@lists.cs.columbia.edu>; Thu, 30 Jun 2022 12:23:29 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id J9sio9-jMF2S for <kvmarm@lists.cs.columbia.edu>;
 Thu, 30 Jun 2022 12:23:28 -0400 (EDT)
Received: from ams.source.kernel.org (ams.source.kernel.org [145.40.68.75])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 58524402DB
 for <kvmarm@lists.cs.columbia.edu>; Thu, 30 Jun 2022 12:23:28 -0400 (EDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by ams.source.kernel.org (Postfix) with ESMTPS id B41D4B82A7D;
 Thu, 30 Jun 2022 16:23:26 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 6AA2DC34115;
 Thu, 30 Jun 2022 16:23:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1656606205;
 bh=/wIBdp+oiWjbA0nGQcK+9VOFJYvNFoz6aGVh1eVQH1I=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=jWKF7Wa7cMz+Kx72y/2aMd7nmgeQoVG8ZAee0gJulRMYq3hsvEXe5rUeHe0rIYOhC
 +uwuG7cqqBHm6sVDp5uWxdJtZ8dlz+2R6hgSr+NaeA8b60phd2b6OZ/aFEJ1ansi6C
 X5xWGE+xDHZGb6Gg8q3UDFcdl0IDjRQ3MhXZt3MubyH2fsb+hT4mDGWKhuFjA54uEI
 lWLBb2C8n5HZJd0+khfAy4UDaWL6UQPOuzPnbrbi7seq71ItgtpNkEcnavHknFs0me
 s8O09VAp5TVb1VGoK1On4ywkykYMJP79ox6tKXwQ454z911FFs1OP+11AF9Gxei7nC
 3QARVhcbJ1/rw==
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.95)
 (envelope-from <maz@kernel.org>) id 1o6wwt-004OZO-DN;
 Thu, 30 Jun 2022 17:23:23 +0100
Date: Thu, 30 Jun 2022 17:23:23 +0100
Message-ID: <87mtdu15ok.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Schspa Shi <schspa@gmail.com>
Subject: Re: [PATCH] KVM: arm64: Fix 64 bit mmio handle
In-Reply-To: <20220630161220.53449-1-schspa@gmail.com>
References: <20220630161220.53449-1-schspa@gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: schspa@gmail.com, james.morse@arm.com,
 alexandru.elisei@arm.com, suzuki.poulose@arm.com, catalin.marinas@arm.com,
 will@kernel.org, linux-arm-kernel@lists.infradead.org,
 kvmarm@lists.cs.columbia.edu, linux-kernel@vger.kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: will@kernel.org, catalin.marinas@arm.com, linux-kernel@vger.kernel.org,
 kvmarm@lists.cs.columbia.edu, linux-arm-kernel@lists.infradead.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Thu, 30 Jun 2022 17:12:20 +0100,
Schspa Shi <schspa@gmail.com> wrote:
> 
> If the len is 8 bytes, we can't get the correct sign extend for
> be system.

I'm afraid you'll have to give me a bit more details.

> 
> Fix the mask type len and the comparison of length.
> 
> Signed-off-by: Schspa Shi <schspa@gmail.com>
> ---
>  arch/arm64/kvm/mmio.c | 4 ++--
>  1 file changed, 2 insertions(+), 2 deletions(-)
> 
> diff --git a/arch/arm64/kvm/mmio.c b/arch/arm64/kvm/mmio.c
> index 3dd38a151d2a6..0692f8b18f35c 100644
> --- a/arch/arm64/kvm/mmio.c
> +++ b/arch/arm64/kvm/mmio.c
> @@ -81,8 +81,8 @@ unsigned long kvm_mmio_read_buf(const void *buf, unsigned int len)
>  int kvm_handle_mmio_return(struct kvm_vcpu *vcpu)
>  {
>  	unsigned long data;
> +	unsigned long mask;
>  	unsigned int len;
> -	int mask;
>  
>  	/* Detect an already handled MMIO return */
>  	if (unlikely(!vcpu->mmio_needed))
> @@ -97,7 +97,7 @@ int kvm_handle_mmio_return(struct kvm_vcpu *vcpu)
>  		data = kvm_mmio_read_buf(run->mmio.data, len);
>  
>  		if (kvm_vcpu_dabt_issext(vcpu) &&
> -		    len < sizeof(unsigned long)) {
> +		    len <= sizeof(unsigned long)) {

If you're reading an 8 byte quantity, what is there to sign-extend?
Sign extension only makes sense if what you're reading is *smaller*
than the size of the register you are targeting.

I must be missing something. And how is that related to running BE? BE
in the host? The guest?

Please convince me.

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
