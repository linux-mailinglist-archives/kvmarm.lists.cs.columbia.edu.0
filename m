Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 95E9199835
	for <lists+kvmarm@lfdr.de>; Thu, 22 Aug 2019 17:33:06 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 2E82B4A579;
	Thu, 22 Aug 2019 11:33:06 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: 0.799
X-Spam-Level: 
X-Spam-Status: No, score=0.799 required=6.1 tests=[BAYES_00=-1.9,
	DNS_FROM_AHBL_RHSBL=2.699] autolearn=unavailable
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id i42E+4SROFCB; Thu, 22 Aug 2019 11:33:06 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 9C2184A5D8;
	Thu, 22 Aug 2019 11:33:04 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 589484A5CD
 for <kvmarm@lists.cs.columbia.edu>; Thu, 22 Aug 2019 11:33:03 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id c7E6HoW2BGp2 for <kvmarm@lists.cs.columbia.edu>;
 Thu, 22 Aug 2019 11:33:01 -0400 (EDT)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id C59374A57B
 for <kvmarm@lists.cs.columbia.edu>; Thu, 22 Aug 2019 11:33:01 -0400 (EDT)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 5773A337;
 Thu, 22 Aug 2019 08:33:01 -0700 (PDT)
Received: from [10.1.196.217] (e121566-lin.cambridge.arm.com [10.1.196.217])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 8160A3F718;
 Thu, 22 Aug 2019 08:33:00 -0700 (PDT)
Subject: Re: [PATCH 00/59] KVM: arm64: ARMv8.3 Nested Virtualization support
From: Alexandru Elisei <alexandru.elisei@arm.com>
To: Marc Zyngier <Marc.Zyngier@arm.com>, "linux-arm-kernel@lists.infradead.org"
 <linux-arm-kernel@lists.infradead.org>,
 "kvmarm@lists.cs.columbia.edu" <kvmarm@lists.cs.columbia.edu>,
 "kvm@vger.kernel.org" <kvm@vger.kernel.org>
References: <20190621093843.220980-1-marc.zyngier@arm.com>
 <69cf1fe7-912c-1767-ff1b-dfcc7f549e44@arm.com>
 <0d9aa552-fa01-c482-41d7-587acf308259@arm.com>
 <55184c0d-8a8f-ca67-894c-1e738aee262b@arm.com>
Message-ID: <97b82b0d-57a4-cc63-8634-b2dff9e3614b@arm.com>
Date: Thu, 22 Aug 2019 16:32:59 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.7.2
MIME-Version: 1.0
In-Reply-To: <55184c0d-8a8f-ca67-894c-1e738aee262b@arm.com>
Content-Language: en-US
Cc: Andre Przywara <Andre.Przywara@arm.com>,
 Dave P Martin <Dave.Martin@arm.com>
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

T24gOC8yMi8xOSAxMjo1NyBQTSwgQWxleGFuZHJ1IEVsaXNlaSB3cm90ZToKPiBbLi5dCj4gSSB0
cmllZCB0byBmaXggaXQgd2l0aCB0aGUgZm9sbG93aW5nIHBhdGNoLCBpbmplY3RfdW5kZWY2NCB3
YXMgc2ltaWxhcmx5IGJyb2tlbjoKPgo+IGRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2t2bS9pbmpl
Y3RfZmF1bHQuYyBiL2FyY2gvYXJtNjQva3ZtL2luamVjdF9mYXVsdC5jCj4gaW5kZXggZmFjOTYy
YjQ2N2JkLi5hZWU4YTllZjM2ZDUgMTAwNjQ0Cj4gLS0tIGEvYXJjaC9hcm02NC9rdm0vaW5qZWN0
X2ZhdWx0LmMKPiArKysgYi9hcmNoL2FybTY0L2t2bS9pbmplY3RfZmF1bHQuYwo+IEBAIC01Mywx
NSArNTMsNyBAQCBzdGF0aWMgdm9pZCBpbmplY3RfYWJ0NjQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1
LCBib29sIGlzX2lhYnQsCj4gdW5zaWduZWQgbG9uZyBhZGRyCj4gwqB7Cj4gwqDCoMKgwqAgdW5z
aWduZWQgbG9uZyBjcHNyID0gKnZjcHVfY3Bzcih2Y3B1KTsKPiDCoMKgwqDCoCBib29sIGlzX2Fh
cmNoMzIgPSB2Y3B1X21vZGVfaXNfMzJiaXQodmNwdSk7Cj4gLcKgwqDCoCB1MzIgZXNyID0gMDsK
PiAtCj4gLcKgwqDCoCB2Y3B1X3dyaXRlX2Vscl9lbDEodmNwdSwgKnZjcHVfcGModmNwdSkpOwo+
IC3CoMKgwqAgKnZjcHVfcGModmNwdSkgPSBnZXRfZXhjZXB0X3ZlY3Rvcih2Y3B1LCBleGNlcHRf
dHlwZV9zeW5jKTsKPiAtCj4gLcKgwqDCoCAqdmNwdV9jcHNyKHZjcHUpID0gUFNUQVRFX0ZBVUxU
X0JJVFNfNjQ7Cj4gLcKgwqDCoCB2Y3B1X3dyaXRlX3Nwc3IodmNwdSwgY3Bzcik7Cj4gLQo+IC3C
oMKgwqAgdmNwdV93cml0ZV9zeXNfcmVnKHZjcHUsIGFkZHIsIEZBUl9FTDEpOwo+ICvCoMKgwqAg
dTMyIGVzciA9IEVTUl9FTHhfRlNDX0VYVEFCVDsKPiDCoAo+IMKgwqDCoMKgIC8qCj4gwqDCoMKg
wqAgwqAqIEJ1aWxkIGFuIHtpLGR9YWJvcnQsIGRlcGVuZGluZyBvbiB0aGUgbGV2ZWwgYW5kIHRo
ZQo+IEBAIC04MiwxMyArNzQsMTIgQEAgc3RhdGljIHZvaWQgaW5qZWN0X2FidDY0KHN0cnVjdCBr
dm1fdmNwdSAqdmNwdSwgYm9vbAo+IGlzX2lhYnQsIHVuc2lnbmVkIGxvbmcgYWRkcgo+IMKgwqDC
oMKgIGlmICghaXNfaWFidCkKPiDCoMKgwqDCoCDCoMKgwqAgZXNyIHw9IEVTUl9FTHhfRUNfREFC
VF9MT1cgPDwgRVNSX0VMeF9FQ19TSElGVDsKPiDCoAo+IC3CoMKgwqAgdmNwdV93cml0ZV9zeXNf
cmVnKHZjcHUsIGVzciB8IEVTUl9FTHhfRlNDX0VYVEFCVCwgRVNSX0VMMSk7Cj4gLX0KPiArwqDC
oMKgIGlmIChuZXN0ZWRfdmlydF9pbl91c2UodmNwdSkpIHsKPiArwqDCoMKgIMKgwqDCoCBrdm1f
aW5qZWN0X25lc3RlZF9zeW5jKHZjcHUsIGVzcik7Cj4gK8KgwqDCoCDCoMKgwqAgcmV0dXJuOwo+
ICvCoMKgwqAgfQo+IMKgCj4gLXN0YXRpYyB2b2lkIGluamVjdF91bmRlZjY0KHN0cnVjdCBrdm1f
dmNwdSAqdmNwdSkKPiAtewo+IC3CoMKgwqAgdW5zaWduZWQgbG9uZyBjcHNyID0gKnZjcHVfY3Bz
cih2Y3B1KTsKPiAtwqDCoMKgIHUzMiBlc3IgPSAoRVNSX0VMeF9FQ19VTktOT1dOIDw8IEVTUl9F
THhfRUNfU0hJRlQpOwo+ICvCoMKgwqAgdmNwdV93cml0ZV9zeXNfcmVnKHZjcHUsIGVzciwgRVNS
X0VMMSk7Cj4gwqAKPiDCoMKgwqDCoCB2Y3B1X3dyaXRlX2Vscl9lbDEodmNwdSwgKnZjcHVfcGMo
dmNwdSkpOwo+IMKgwqDCoMKgICp2Y3B1X3BjKHZjcHUpID0gZ2V0X2V4Y2VwdF92ZWN0b3IodmNw
dSwgZXhjZXB0X3R5cGVfc3luYyk7Cj4gQEAgLTk2LDYgKzg3LDE0IEBAIHN0YXRpYyB2b2lkIGlu
amVjdF91bmRlZjY0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKPiDCoMKgwqDCoCAqdmNwdV9jcHNy
KHZjcHUpID0gUFNUQVRFX0ZBVUxUX0JJVFNfNjQ7Cj4gwqDCoMKgwqAgdmNwdV93cml0ZV9zcHNy
KHZjcHUsIGNwc3IpOwo+IMKgCj4gK8KgwqDCoCB2Y3B1X3dyaXRlX3N5c19yZWcodmNwdSwgYWRk
ciwgRkFSX0VMMSk7Cj4gK30KPiArCj4gK3N0YXRpYyB2b2lkIGluamVjdF91bmRlZjY0KHN0cnVj
dCBrdm1fdmNwdSAqdmNwdSkKPiArewo+ICvCoMKgwqAgdW5zaWduZWQgbG9uZyBjcHNyID0gKnZj
cHVfY3Bzcih2Y3B1KTsKPiArwqDCoMKgIHUzMiBlc3IgPSBFU1JfRUx4X0VDX1VOS05PV04gPDwg
RVNSX0VMeF9FQ19TSElGVDsKPiArCj4gwqDCoMKgwqAgLyoKPiDCoMKgwqDCoCDCoCogQnVpbGQg
YW4gdW5rbm93biBleGNlcHRpb24sIGRlcGVuZGluZyBvbiB0aGUgaW5zdHJ1Y3Rpb24KPiDCoMKg
wqDCoCDCoCogc2V0Lgo+IEBAIC0xMDMsNyArMTAyLDE4IEBAIHN0YXRpYyB2b2lkIGluamVjdF91
bmRlZjY0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKPiDCoMKgwqDCoCBpZiAoa3ZtX3ZjcHVfdHJh
cF9pbF9pczMyYml0KHZjcHUpKQo+IMKgwqDCoMKgIMKgwqDCoCBlc3IgfD0gRVNSX0VMeF9JTDsK
PiDCoAo+ICvCoMKgwqAgaWYgKG5lc3RlZF92aXJ0X2luX3VzZSh2Y3B1KSkgewo+ICvCoMKgwqAg
wqDCoMKgIGt2bV9pbmplY3RfbmVzdGVkX3N5bmModmNwdSwgZXNyKTsKPiArwqDCoMKgIMKgwqDC
oCByZXR1cm47Cj4gK8KgwqDCoCB9Cj4gKwo+IMKgwqDCoMKgIHZjcHVfd3JpdGVfc3lzX3JlZyh2
Y3B1LCBlc3IsIEVTUl9FTDEpOwo+ICsKPiArwqDCoMKgIHZjcHVfd3JpdGVfZWxyX2VsMSh2Y3B1
LCAqdmNwdV9wYyh2Y3B1KSk7Cj4gK8KgwqDCoCAqdmNwdV9wYyh2Y3B1KSA9IGdldF9leGNlcHRf
dmVjdG9yKHZjcHUsIGV4Y2VwdF90eXBlX3N5bmMpOwo+ICsKPiArwqDCoMKgICp2Y3B1X2Nwc3Io
dmNwdSkgPSBQU1RBVEVfRkFVTFRfQklUU182NDsKPiArwqDCoMKgIHZjcHVfd3JpdGVfc3Bzcih2
Y3B1LCBjcHNyKTsKPiDCoH0KPiDCoAo+IMKgLyoqCj4KT29wcywgdGhlIGFib3ZlIGlzIGJyb2tl
biBmb3IgYW55dGhpbmcgcnVubmluZyB1bmRlciBhIEwxIGd1ZXN0IGh5cGVydmlzb3IuCkhvcGVm
dWxseSB0aGlzIGlzIGJldHRlcjoKCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2t2bS9pbmplY3Rf
ZmF1bHQuYyBiL2FyY2gvYXJtNjQva3ZtL2luamVjdF9mYXVsdC5jCmluZGV4IGZhYzk2MmI0Njdi
ZC4uOTUyZTQ5YWViNmYwIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2t2bS9pbmplY3RfZmF1bHQu
YworKysgYi9hcmNoL2FybTY0L2t2bS9pbmplY3RfZmF1bHQuYwpAQCAtNTMsMTUgKzUzLDcgQEAg
c3RhdGljIHZvaWQgaW5qZWN0X2FidDY0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgYm9vbCBpc19p
YWJ0LAp1bnNpZ25lZCBsb25nIGFkZHIKwqB7CsKgwqDCoMKgIHVuc2lnbmVkIGxvbmcgY3BzciA9
ICp2Y3B1X2Nwc3IodmNwdSk7CsKgwqDCoMKgIGJvb2wgaXNfYWFyY2gzMiA9IHZjcHVfbW9kZV9p
c18zMmJpdCh2Y3B1KTsKLcKgwqDCoCB1MzIgZXNyID0gMDsKLQotwqDCoMKgIHZjcHVfd3JpdGVf
ZWxyX2VsMSh2Y3B1LCAqdmNwdV9wYyh2Y3B1KSk7Ci3CoMKgwqAgKnZjcHVfcGModmNwdSkgPSBn
ZXRfZXhjZXB0X3ZlY3Rvcih2Y3B1LCBleGNlcHRfdHlwZV9zeW5jKTsKLQotwqDCoMKgICp2Y3B1
X2Nwc3IodmNwdSkgPSBQU1RBVEVfRkFVTFRfQklUU182NDsKLcKgwqDCoCB2Y3B1X3dyaXRlX3Nw
c3IodmNwdSwgY3Bzcik7Ci0KLcKgwqDCoCB2Y3B1X3dyaXRlX3N5c19yZWcodmNwdSwgYWRkciwg
RkFSX0VMMSk7CivCoMKgwqAgdTMyIGVzciA9IEVTUl9FTHhfRlNDX0VYVEFCVDsKwqAKwqDCoMKg
wqAgLyoKwqDCoMKgwqAgwqAqIEJ1aWxkIGFuIHtpLGR9YWJvcnQsIGRlcGVuZGluZyBvbiB0aGUg
bGV2ZWwgYW5kIHRoZQpAQCAtODIsMTMgKzc0LDEyIEBAIHN0YXRpYyB2b2lkIGluamVjdF9hYnQ2
NChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGJvb2wKaXNfaWFidCwgdW5zaWduZWQgbG9uZyBhZGRy
CsKgwqDCoMKgIGlmICghaXNfaWFidCkKwqDCoMKgwqAgwqDCoMKgIGVzciB8PSBFU1JfRUx4X0VD
X0RBQlRfTE9XIDw8IEVTUl9FTHhfRUNfU0hJRlQ7CsKgCi3CoMKgwqAgdmNwdV93cml0ZV9zeXNf
cmVnKHZjcHUsIGVzciB8IEVTUl9FTHhfRlNDX0VYVEFCVCwgRVNSX0VMMSk7Ci19CivCoMKgwqAg
aWYgKGlzX2h5cF9jdHh0KHZjcHUpKSB7CivCoMKgwqAgwqDCoMKgIGt2bV9pbmplY3RfbmVzdGVk
X3N5bmModmNwdSwgZXNyKTsKK8KgwqDCoCDCoMKgwqAgcmV0dXJuOworwqDCoMKgIH0KwqAKLXN0
YXRpYyB2b2lkIGluamVjdF91bmRlZjY0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKLXsKLcKgwqDC
oCB1bnNpZ25lZCBsb25nIGNwc3IgPSAqdmNwdV9jcHNyKHZjcHUpOwotwqDCoMKgIHUzMiBlc3Ig
PSAoRVNSX0VMeF9FQ19VTktOT1dOIDw8IEVTUl9FTHhfRUNfU0hJRlQpOworwqDCoMKgIHZjcHVf
d3JpdGVfc3lzX3JlZyh2Y3B1LCBlc3IsIEVTUl9FTDEpOwrCoArCoMKgwqDCoCB2Y3B1X3dyaXRl
X2Vscl9lbDEodmNwdSwgKnZjcHVfcGModmNwdSkpOwrCoMKgwqDCoCAqdmNwdV9wYyh2Y3B1KSA9
IGdldF9leGNlcHRfdmVjdG9yKHZjcHUsIGV4Y2VwdF90eXBlX3N5bmMpOwpAQCAtOTYsNiArODcs
MTQgQEAgc3RhdGljIHZvaWQgaW5qZWN0X3VuZGVmNjQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQrC
oMKgwqDCoCAqdmNwdV9jcHNyKHZjcHUpID0gUFNUQVRFX0ZBVUxUX0JJVFNfNjQ7CsKgwqDCoMKg
IHZjcHVfd3JpdGVfc3Bzcih2Y3B1LCBjcHNyKTsKwqAKK8KgwqDCoCB2Y3B1X3dyaXRlX3N5c19y
ZWcodmNwdSwgYWRkciwgRkFSX0VMMSk7Cit9CisKK3N0YXRpYyB2b2lkIGluamVjdF91bmRlZjY0
KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKK3sKK8KgwqDCoCB1bnNpZ25lZCBsb25nIGNwc3IgPSAq
dmNwdV9jcHNyKHZjcHUpOworwqDCoMKgIHUzMiBlc3IgPSBFU1JfRUx4X0VDX1VOS05PV04gPDwg
RVNSX0VMeF9FQ19TSElGVDsKKwrCoMKgwqDCoCAvKgrCoMKgwqDCoCDCoCogQnVpbGQgYW4gdW5r
bm93biBleGNlcHRpb24sIGRlcGVuZGluZyBvbiB0aGUgaW5zdHJ1Y3Rpb24KwqDCoMKgwqAgwqAq
IHNldC4KQEAgLTEwMyw3ICsxMDIsMTggQEAgc3RhdGljIHZvaWQgaW5qZWN0X3VuZGVmNjQoc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1KQrCoMKgwqDCoCBpZiAoa3ZtX3ZjcHVfdHJhcF9pbF9pczMyYml0
KHZjcHUpKQrCoMKgwqDCoCDCoMKgwqAgZXNyIHw9IEVTUl9FTHhfSUw7CsKgCivCoMKgwqAgaWYg
KGlzX2h5cF9jdHh0KHZjcHUpKSB7CivCoMKgwqAgwqDCoMKgIGt2bV9pbmplY3RfbmVzdGVkX3N5
bmModmNwdSwgZXNyKTsKK8KgwqDCoCDCoMKgwqAgcmV0dXJuOworwqDCoMKgIH0KKwrCoMKgwqDC
oCB2Y3B1X3dyaXRlX3N5c19yZWcodmNwdSwgZXNyLCBFU1JfRUwxKTsKKworwqDCoMKgIHZjcHVf
d3JpdGVfZWxyX2VsMSh2Y3B1LCAqdmNwdV9wYyh2Y3B1KSk7CivCoMKgwqAgKnZjcHVfcGModmNw
dSkgPSBnZXRfZXhjZXB0X3ZlY3Rvcih2Y3B1LCBleGNlcHRfdHlwZV9zeW5jKTsKKworwqDCoMKg
ICp2Y3B1X2Nwc3IodmNwdSkgPSBQU1RBVEVfRkFVTFRfQklUU182NDsKK8KgwqDCoCB2Y3B1X3dy
aXRlX3Nwc3IodmNwdSwgY3Bzcik7CsKgfQrCoArCoC8qKgoKX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX18Ka3ZtYXJtIG1haWxpbmcgbGlzdAprdm1hcm1AbGlz
dHMuY3MuY29sdW1iaWEuZWR1Cmh0dHBzOi8vbGlzdHMuY3MuY29sdW1iaWEuZWR1L21haWxtYW4v
bGlzdGluZm8va3ZtYXJtCg==
