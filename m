Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 138A14FB405
	for <lists+kvmarm@lfdr.de>; Mon, 11 Apr 2022 08:52:33 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 25D924B201;
	Mon, 11 Apr 2022 02:52:32 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -1.789
X-Spam-Level: 
X-Spam-Status: No, score=-1.789 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, T_DKIM_INVALID=0.01, URIBL_BLOCKED=0.001]
	autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id rNp27tFCRf4t; Mon, 11 Apr 2022 02:52:32 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id BFC464B1E0;
	Mon, 11 Apr 2022 02:52:30 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 7C22F4B08F
 for <kvmarm@lists.cs.columbia.edu>; Mon, 11 Apr 2022 02:52:29 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id IMrHGoNuX4j0 for <kvmarm@lists.cs.columbia.edu>;
 Mon, 11 Apr 2022 02:52:28 -0400 (EDT)
Received: from ams.source.kernel.org (ams.source.kernel.org [145.40.68.75])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 1987F4A10E
 for <kvmarm@lists.cs.columbia.edu>; Mon, 11 Apr 2022 02:52:28 -0400 (EDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by ams.source.kernel.org (Postfix) with ESMTPS id B6819B810FD;
 Mon, 11 Apr 2022 06:52:26 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 5D403C385A4;
 Mon, 11 Apr 2022 06:52:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1649659945;
 bh=yx+UeJ53L3lrvtA6p4tTHO/FMgJTGtQyiFwwhfFKWNQ=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=gDIXmFyXrkR/rHm8QEzS45Ezv6GyBt67dtUAkfRbVWrZ49RFcn1v69Nk/5nx7jk/p
 AkNx7mNb9CEtEZD8E7jtKspLrW20g1lCL7kJrpYAEFHSYbQgFtHBHF55B6DWxYqJge
 bZ9ZysQZ3XB0YIDd5+emhql2nfe2mY4PL3R4YA0F0XVL9LOtG+z84z10kcKCV2FTI4
 GSSnugljbqUt32dfKl+1ucBUj+9JSHK4AtRmCZouswsmPwg5gq3IyKq/C3uk5umTAI
 8rUvGMTj82q00kBEXQvvqeTQycnDw8Re6pX2BJR2fn0I5xHG692ko9sCY15VUNN7UU
 a09spn+vX4c6A==
Received: from ip-185-104-136-29.ptr.icomera.net ([185.104.136.29]
 helo=billy-the-mountain.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.94.2)
 (envelope-from <maz@kernel.org>)
 id 1ndnuP-003FOL-JJ; Mon, 11 Apr 2022 07:52:22 +0100
Date: Mon, 11 Apr 2022 07:52:07 +0100
Message-ID: <87bkx8cdt4.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Kalesh Singh <kaleshsingh@google.com>
Subject: Re: [PATCH v7 1/6] KVM: arm64: Introduce hyp_alloc_private_va_range()
In-Reply-To: <20220408200349.1529080-2-kaleshsingh@google.com>
References: <20220408200349.1529080-1-kaleshsingh@google.com>
 <20220408200349.1529080-2-kaleshsingh@google.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.104.136.29
X-SA-Exim-Rcpt-To: kaleshsingh@google.com, will@kernel.org, qperret@google.com,
 tabba@google.com, surenb@google.com, kernel-team@android.com,
 james.morse@arm.com, alexandru.elisei@arm.com, suzuki.poulose@arm.com,
 catalin.marinas@arm.com, mark.rutland@arm.com, yuzenghui@huawei.com,
 masahiroy@kernel.org, ndesaulniers@google.com, changbin.du@intel.com,
 linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
 linux-kernel@vger.kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: Nick Desaulniers <ndesaulniers@google.com>, will@kernel.org,
 kernel-team@android.com, Masahiro Yamada <masahiroy@kernel.org>,
 linux-kernel@vger.kernel.org, Changbin Du <changbin.du@intel.com>,
 linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>, surenb@google.com,
 kvmarm@lists.cs.columbia.edu
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Fri, 08 Apr 2022 21:03:24 +0100,
Kalesh Singh <kaleshsingh@google.com> wrote:
> 
> hyp_alloc_private_va_range() can be used to reserve private VA ranges
> in the nVHE hypervisor. Allocations are aligned based on the order of
> the requested size.
> 
> This will be used to implement stack guard pages for KVM nVHE hypervisor
> (nVHE Hyp mode / not pKVM), in a subsequent patch in the series.
> 
> Signed-off-by: Kalesh Singh <kaleshsingh@google.com>
> Tested-by: Fuad Tabba <tabba@google.com>
> Reviewed-by: Fuad Tabba <tabba@google.com>
> ---
> 
> Changes in v7:
>   - Add Fuad's Reviewed-by and Tested-by tags.
> 
> Changes in v6:
>   - Update kernel-doc for hyp_alloc_private_va_range()
>     and add return description, per Stephen
>   - Update hyp_alloc_private_va_range() to return an int error code,
>     per Stephen
>   - Replace IS_ERR() checks with IS_ERR_VALUE() check, per Stephen
>   - Clean up goto, per Stephen
> 
> Changes in v5:
>   - Align private allocations based on the order of their size, per Marc
> 
> Changes in v4:
>   - Handle null ptr in hyp_alloc_private_va_range() and replace
>     IS_ERR_OR_NULL checks in callers with IS_ERR checks, per Fuad
>   - Fix kernel-doc comments format, per Fuad
> 
> Changes in v3:
>   - Handle null ptr in IS_ERR_OR_NULL checks, per Mark
> 
> 
>  arch/arm64/include/asm/kvm_mmu.h |  1 +
>  arch/arm64/kvm/mmu.c             | 66 +++++++++++++++++++++-----------
>  2 files changed, 45 insertions(+), 22 deletions(-)
> 
> diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h
> index 74735a864eee..a50cbb5ba402 100644
> --- a/arch/arm64/include/asm/kvm_mmu.h
> +++ b/arch/arm64/include/asm/kvm_mmu.h
> @@ -154,6 +154,7 @@ static __always_inline unsigned long __kern_hyp_va(unsigned long v)
>  int kvm_share_hyp(void *from, void *to);
>  void kvm_unshare_hyp(void *from, void *to);
>  int create_hyp_mappings(void *from, void *to, enum kvm_pgtable_prot prot);
> +int hyp_alloc_private_va_range(size_t size, unsigned long *haddr);
>  int create_hyp_io_mappings(phys_addr_t phys_addr, size_t size,
>  			   void __iomem **kaddr,
>  			   void __iomem **haddr);
> diff --git a/arch/arm64/kvm/mmu.c b/arch/arm64/kvm/mmu.c
> index 0d19259454d8..3d3efea4e991 100644
> --- a/arch/arm64/kvm/mmu.c
> +++ b/arch/arm64/kvm/mmu.c
> @@ -457,23 +457,22 @@ int create_hyp_mappings(void *from, void *to, enum kvm_pgtable_prot prot)
>  	return 0;
>  }
>  
> -static int __create_hyp_private_mapping(phys_addr_t phys_addr, size_t size,
> -					unsigned long *haddr,
> -					enum kvm_pgtable_prot prot)
> +
> +/**
> + * hyp_alloc_private_va_range - Allocates a private VA range.
> + * @size:	The size of the VA range to reserve.
> + * @haddr:	The hypervisor virtual start address of the allocation.
> + *
> + * The private virtual address (VA) range is allocated below io_map_base
> + * and aligned based on the order of @size.
> + *
> + * Return: 0 on success or negative error code on failure.
> + */
> +int hyp_alloc_private_va_range(size_t size, unsigned long *haddr)
>  {
>  	unsigned long base;
>  	int ret = 0;
>  
> -	if (!kvm_host_owns_hyp_mappings()) {
> -		base = kvm_call_hyp_nvhe(__pkvm_create_private_mapping,
> -					 phys_addr, size, prot);
> -		if (IS_ERR_OR_NULL((void *)base))
> -			return PTR_ERR((void *)base);
> -		*haddr = base;
> -
> -		return 0;
> -	}
> -
>  	mutex_lock(&kvm_hyp_pgd_mutex);
>  
>  	/*
> @@ -484,30 +483,53 @@ static int __create_hyp_private_mapping(phys_addr_t phys_addr, size_t size,
>  	 *
>  	 * The allocated size is always a multiple of PAGE_SIZE.
>  	 */
> -	size = PAGE_ALIGN(size + offset_in_page(phys_addr));
> -	base = io_map_base - size;
> +	base = io_map_base - PAGE_ALIGN(size);
> +
> +	/* Align the allocation based on the order of its size */
> +	base = ALIGN_DOWN(base, PAGE_SIZE << get_order(size));
>  
>  	/*
>  	 * Verify that BIT(VA_BITS - 1) hasn't been flipped by
>  	 * allocating the new area, as it would indicate we've
>  	 * overflowed the idmap/IO address range.
>  	 */
> -	if ((base ^ io_map_base) & BIT(VA_BITS - 1))
> +	if (!base || (base ^ io_map_base) & BIT(VA_BITS - 1))

I don't get this '!base' check. Why isn't it encompassed by the
'VA_BITS - 1' flip check?

>  		ret = -ENOMEM;
>  	else
> -		io_map_base = base;
> +		*haddr = io_map_base = base;
>  
>  	mutex_unlock(&kvm_hyp_pgd_mutex);
>  
> +	return ret;
> +}
> +
> +static int __create_hyp_private_mapping(phys_addr_t phys_addr, size_t size,
> +					unsigned long *haddr,
> +					enum kvm_pgtable_prot prot)
> +{
> +	unsigned long addr;
> +	int ret = 0;
> +
> +	if (!kvm_host_owns_hyp_mappings()) {
> +		addr = kvm_call_hyp_nvhe(__pkvm_create_private_mapping,
> +					 phys_addr, size, prot);
> +		if (IS_ERR_VALUE(addr))
> +			return addr;
> +		*haddr = addr;
> +
> +		return 0;
> +	}
> +
> +	size += offset_in_page(phys_addr);

This hardly makes any sense on its own. I get it that it is still
doing the right thing as hyp_alloc_private_va_range() will fix it up,
but I'd rather you keep the PAGE_ALIGN() here, even if it ends up
being duplicated.

> +	ret = hyp_alloc_private_va_range(size, &addr);
>  	if (ret)
> -		goto out;
> +		return ret;
>  
> -	ret = __create_hyp_mappings(base, size, phys_addr, prot);
> +	ret = __create_hyp_mappings(addr, size, phys_addr, prot);
>  	if (ret)
> -		goto out;
> +		return ret;
>  
> -	*haddr = base + offset_in_page(phys_addr);
> -out:
> +	*haddr = addr + offset_in_page(phys_addr);
>  	return ret;
>  }
>  

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
