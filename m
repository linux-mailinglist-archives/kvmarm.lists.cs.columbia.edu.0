Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 85981457D1D
	for <lists+kvmarm@lfdr.de>; Sat, 20 Nov 2021 11:36:20 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 33FD84B11F;
	Sat, 20 Nov 2021 05:36:20 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: 0.909
X-Spam-Level: 
X-Spam-Status: No, score=0.909 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, DNS_FROM_AHBL_RHSBL=2.699, T_DKIM_INVALID=0.01]
	autolearn=no
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@infradead.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id YjJA41Ce1I+v; Sat, 20 Nov 2021 05:36:18 -0500 (EST)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id EEB474B1BD;
	Sat, 20 Nov 2021 05:36:07 -0500 (EST)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 49B794B10E
 for <kvmarm@lists.cs.columbia.edu>; Sat, 20 Nov 2021 05:29:14 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id BsmxSFMvbfWT for <kvmarm@lists.cs.columbia.edu>;
 Sat, 20 Nov 2021 05:29:11 -0500 (EST)
Received: from casper.infradead.org (casper.infradead.org [90.155.50.34])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id BC93A4B13D
 for <kvmarm@lists.cs.columbia.edu>; Sat, 20 Nov 2021 05:29:11 -0500 (EST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
 d=infradead.org; s=casper.20170209; h=Sender:Content-Transfer-Encoding:
 Content-Type:MIME-Version:References:In-Reply-To:Message-Id:Date:Subject:Cc:
 To:From:Reply-To:Content-ID:Content-Description;
 bh=n8HBfWTu5bw0VUA5DxZAxr1KwmgBFzh4k/s7aD89EFg=; b=k7Q83HP6YZuTClV8WeAFlsoLNg
 HV8ASY99qfCDPu5N1IjN0z7wybRC7qEFOoaR09TsGb+zq61fg+hRQ7DLRVVxS3+gq++iUstp7AME6
 YBHoAlke5i6gQ6WMLH4gDHKKW6lZbf6IClWYNrFoNnF6Lkh4tqRZ1bjj9uNC+zWjInQis+o4Ow/D/
 /dKp4wJt/0LFVc23P/e4IgX1jE9mOL7MwzECjtG1BYXGLSIMek173W7C+c+PjcpZnbAMOHWLsvd7F
 OsKFcSnwEUUh7O2jDQi8yvdwGa+p/ic9bKxHlufMFJf4K+NxobPguwhnJUODAHK8/fQfvsMnSMoFc
 zr2crqRA==;
Received: from i7.infradead.org ([2001:8b0:10b:1:21e:67ff:fecb:7a92])
 by casper.infradead.org with esmtpsa (Exim 4.94.2 #2 (Red Hat Linux))
 id 1moNbQ-00AUNI-Vg; Sat, 20 Nov 2021 10:28:13 +0000
Received: from dwoodhou by i7.infradead.org with local (Exim 4.94.2 #2 (Red
 Hat Linux)) id 1moNbQ-0002KQ-P7; Sat, 20 Nov 2021 10:28:12 +0000
From: David Woodhouse <dwmw2@infradead.org>
To: Paolo Bonzini <pbonzini@redhat.com>,
	kvm <kvm@vger.kernel.org>
Subject: [PATCH v4 08/11] KVM: Reinstate gfn_to_pfn_cache with invalidation
 support
Date: Sat, 20 Nov 2021 10:28:07 +0000
Message-Id: <20211120102810.8858-9-dwmw2@infradead.org>
X-Mailer: git-send-email 2.31.1
In-Reply-To: <20211120102810.8858-1-dwmw2@infradead.org>
References: <20211120102810.8858-1-dwmw2@infradead.org>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <dwmw2@infradead.org> by
 casper.infradead.org. See http://www.infradead.org/rpr.html
X-Mailman-Approved-At: Sat, 20 Nov 2021 05:36:05 -0500
Cc: Anup Patel <anup.patel@wdc.com>,
 "wanpengli @ tencent . com" <wanpengli@tencent.com>,
 Catalin Marinas <catalin.marinas@arm.com>,
 Joao Martins <joao.m.martins@oracle.com>, Will Deacon <will@kernel.org>,
 kvmarm@lists.cs.columbia.edu, linux-s390@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, "joro @ 8bytes . org" <joro@8bytes.org>,
 Huacai Chen <chenhuacai@kernel.org>,
 Christian Borntraeger <borntraeger@de.ibm.com>,
 Aleksandar Markovic <aleksandar.qemu.devel@gmail.com>, karahmed@amazon.com,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Boris Ostrovsky <boris.ostrovsky@oracle.com>,
 linux-arm-kernel <linux-arm-kernel@lists.infradead.org>,
 "jmattson @ google . com" <jmattson@google.com>,
 "mtosatti @ redhat . com" <mtosatti@redhat.com>, linux-mips@vger.kernel.org,
 kvm-riscv@lists.infradead.org, Marc Zyngier <maz@kernel.org>,
 "vkuznets @ redhat . com" <vkuznets@redhat.com>, linuxppc-dev@lists.ozlabs.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

RnJvbTogRGF2aWQgV29vZGhvdXNlIDxkd213QGFtYXpvbi5jby51az4KClRoaXMgY2FuIGJlIHVz
ZWQgaW4gdHdvIG1vZGVzLiBUaGVyZSBpcyBhbiBhdG9taWMgbW9kZSB3aGVyZSB0aGUgY2FjaGVk
Cm1hcHBpbmcgaXMgYWNjZXNzZWQgd2hpbGUgaG9sZGluZyB0aGUgcndsb2NrLCBhbmQgYSBtb2Rl
IHdoZXJlIHRoZQpwaHlzaWNhbCBhZGRyZXNzIGlzIHVzZWQgYnkgYSB2Q1BVIGluIGd1ZXN0IG1v
ZGUuCgpGb3IgdGhlIGxhdHRlciBjYXNlLCBhbiBpbnZhbGlkYXRpb24gd2lsbCB3YWtlIHRoZSB2
Q1BVIHdpdGggdGhlIG5ldwpLVk1fUkVRX0dQQ19JTlZBTElEQVRFLCBhbmQgdGhlIGFyY2hpdGVj
dHVyZSB3aWxsIG5lZWQgdG8gcmVmcmVzaCBhbnkKY2FjaGVzIGl0IHN0aWxsIG5lZWRzIHRvIGFj
Y2VzcyBiZWZvcmUgZW50ZXJpbmcgZ3Vlc3QgbW9kZSBhZ2Fpbi4KCk9ubHkgb25lIHZDUFUgY2Fu
IGJlIHRhcmdldGVkIGJ5IHRoZSB3YWtlIHJlcXVlc3RzOyBpdCdzIHNpbXBsZSBlbm91Z2gKdG8g
bWFrZSBpdCB3YWtlIGFsbCB2Q1BVcyBvciBldmVuIGEgbWFzayBidXQgSSBkb24ndCBzZWUgYSB1
c2UgY2FzZSBmb3IKdGhhdCBhZGRpdGlvbmFsIGNvbXBsZXhpdHkgcmlnaHQgbm93LgoKSW52YWxp
ZGF0aW9uIGhhcHBlbnMgZnJvbSB0aGUgaW52YWxpZGF0ZV9yYW5nZV9zdGFydCBNTVUgbm90aWZp
ZXIsIHdoaWNoCm5lZWRzIHRvIGJlIGFibGUgdG8gc2xlZXAgaW4gb3JkZXIgdG8gd2FrZSB0aGUg
dkNQVSBhbmQgd2FpdCBmb3IgaXQuCgpUaGlzIG1lYW5zIHRoYXQgcmV2YWxpZGF0aW9uIHBvdGVu
dGlhbGx5IG5lZWRzIHRvICJ3YWl0IiBmb3IgdGhlIE1NVQpvcGVyYXRpb24gdG8gY29tcGxldGUg
YW5kIHRoZSBpbnZhbGlkYXRlX3JhbmdlX2VuZCBub3RpZmllciB0byBiZQppbnZva2VkLiBMaWtl
IHRoZSB2Q1BVIHdoZW4gaXQgdGFrZXMgYSBwYWdlIGZhdWx0IGluIHRoYXQgcGVyaW9kLCB3ZQpq
dXN0IHNwaW4g4oCUIGZpeGluZyB0aGF0IGluIGEgZnV0dXJlIHBhdGNoIGJ5IGltcGxlbWVudGlu
ZyBhbiBhY3R1YWwKKndhaXQqIG1heSBiZSBhbm90aGVyIHBhcnQgb2Ygc2hhdmluZyB0aGlzIHBh
cnRpY3VsYXJseSBoaXJzdXRlIHlhay4KCkFzIG5vdGVkIGluIHRoZSBjb21tZW50cyBpbiB0aGUg
ZnVuY3Rpb24gaXRzZWxmLCB0aGUgb25seSBjYXNlIHdoZXJlCnRoZSBpbnZhbGlkYXRlX3Jhbmdl
X3N0YXJ0IG5vdGlmaWVyIGlzIGV4cGVjdGVkIHRvIGJlIGNhbGxlZCAqd2l0aG91dCoKYmVpbmcg
YWJsZSB0byBzbGVlcCBpcyB3aGVuIHRoZSBPT00gcmVhcGVyIGlzIGtpbGxpbmcgdGhlIHByb2Nl
c3MuIEluCnRoYXQgY2FzZSwgd2UgZXhwZWN0IHRoZSB2Q1BVIHRocmVhZHMgYWxyZWFkeSB0byBo
YXZlIGV4aXRlZCwgYW5kIHRodXMKdGhlcmUgd2lsbCBiZSBub3RoaW5nIHRvIHdha2UsIGFuZCBu
byByZWFzb24gdG8gd2FpdC4gU28gd2UgY2xlYXIgdGhlCktWTV9SRVFVRVNUX1dBSVQgYml0IGFu
ZCBzZW5kIHRoZSByZXF1ZXN0IGFueXdheSwgdGhlbiBjb21wbGFpbiBsb3VkbHkKaWYgdGhlcmUg
YWN0dWFsbHkgKndhcyogYW55dGhpbmcgdG8gd2FrZSB1cC4KClNpZ25lZC1vZmYtYnk6IERhdmlk
IFdvb2Rob3VzZSA8ZHdtd0BhbWF6b24uY28udWs+Ci0tLQogYXJjaC94ODYva3ZtL0tjb25maWcg
ICAgICAgICAgICAgIHwgICAxICsKIGluY2x1ZGUvbGludXgva3ZtX2hvc3QuaCAgICAgICAgICB8
IDEwMyArKysrKysrKysrCiBpbmNsdWRlL2xpbnV4L2t2bV90eXBlcy5oICAgICAgICAgfCAgMTgg
KysKIHZpcnQva3ZtL0tjb25maWcgICAgICAgICAgICAgICAgICB8ICAgMyArCiB2aXJ0L2t2bS9N
YWtlZmlsZS5rdm0gICAgICAgICAgICAgfCAgIDEgKwogdmlydC9rdm0vZGlydHlfcmluZy5jICAg
ICAgICAgICAgIHwgICAyICstCiB2aXJ0L2t2bS9rdm1fbWFpbi5jICAgICAgICAgICAgICAgfCAg
MTIgKy0KIHZpcnQva3ZtL3ttbXVfbG9jay5oID0+IGt2bV9tbS5ofSB8ICAyMyArKy0KIHZpcnQv
a3ZtL3BmbmNhY2hlLmMgICAgICAgICAgICAgICB8IDMxOCArKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysKIDkgZmlsZXMgY2hhbmdlZCwgNDc0IGluc2VydGlvbnMoKyksIDcgZGVsZXRpb25z
KC0pCiByZW5hbWUgdmlydC9rdm0ve21tdV9sb2NrLmggPT4ga3ZtX21tLmh9ICg1NSUpCiBjcmVh
dGUgbW9kZSAxMDA2NDQgdmlydC9rdm0vcGZuY2FjaGUuYwoKZGlmZiAtLWdpdCBhL2FyY2gveDg2
L2t2bS9LY29uZmlnIGIvYXJjaC94ODYva3ZtL0tjb25maWcKaW5kZXggZDdmYTBhNDJhYzI1Li5h
ZjM1MTEwN2Q0N2YgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2t2bS9LY29uZmlnCisrKyBiL2FyY2gv
eDg2L2t2bS9LY29uZmlnCkBAIC0yNiw2ICsyNiw3IEBAIGNvbmZpZyBLVk0KIAlzZWxlY3QgUFJF
RU1QVF9OT1RJRklFUlMKIAlzZWxlY3QgTU1VX05PVElGSUVSCiAJc2VsZWN0IEhBVkVfS1ZNX0lS
UUNISVAKKwlzZWxlY3QgSEFWRV9LVk1fUEZOQ0FDSEUKIAlzZWxlY3QgSEFWRV9LVk1fSVJRRkQK
IAlzZWxlY3QgSEFWRV9LVk1fRElSVFlfUklORwogCXNlbGVjdCBJUlFfQllQQVNTX01BTkFHRVIK
ZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgva3ZtX2hvc3QuaCBiL2luY2x1ZGUvbGludXgva3Zt
X2hvc3QuaAppbmRleCBjMzEwNjQ4Y2M4ZjEuLjQ1N2MzOGQ3NTkxMyAxMDA2NDQKLS0tIGEvaW5j
bHVkZS9saW51eC9rdm1faG9zdC5oCisrKyBiL2luY2x1ZGUvbGludXgva3ZtX2hvc3QuaApAQCAt
MTUxLDYgKzE1MSw3IEBAIHN0YXRpYyBpbmxpbmUgYm9vbCBpc19lcnJvcl9wYWdlKHN0cnVjdCBw
YWdlICpwYWdlKQogI2RlZmluZSBLVk1fUkVRX1VOQkxPQ0sgICAgICAgICAgIDIKICNkZWZpbmUg
S1ZNX1JFUV9VTkhBTFQgICAgICAgICAgICAzCiAjZGVmaW5lIEtWTV9SRVFfVk1fREVBRCAgICAg
ICAgICAgKDQgfCBLVk1fUkVRVUVTVF9XQUlUIHwgS1ZNX1JFUVVFU1RfTk9fV0FLRVVQKQorI2Rl
ZmluZSBLVk1fUkVRX0dQQ19JTlZBTElEQVRFICAgICg1IHwgS1ZNX1JFUVVFU1RfV0FJVCB8IEtW
TV9SRVFVRVNUX05PX1dBS0VVUCkKICNkZWZpbmUgS1ZNX1JFUVVFU1RfQVJDSF9CQVNFICAgICA4
CiAKICNkZWZpbmUgS1ZNX0FSQ0hfUkVRX0ZMQUdTKG5yLCBmbGFncykgKHsgXApAQCAtNTU5LDYg
KzU2MCwxMCBAQCBzdHJ1Y3Qga3ZtIHsKIAl1bnNpZ25lZCBsb25nIG1uX2FjdGl2ZV9pbnZhbGlk
YXRlX2NvdW50OwogCXN0cnVjdCByY3V3YWl0IG1uX21lbXNsb3RzX3VwZGF0ZV9yY3V3YWl0Owog
CisJLyogRm9yIG1hbmFnZW1lbnQgLyBpbnZhbGlkYXRpb24gb2YgZ2ZuX3RvX3Bmbl9jYWNoZXMg
Ki8KKwlzcGlubG9ja190IGdwY19sb2NrOworCXN0cnVjdCBsaXN0X2hlYWQgZ3BjX2xpc3Q7CisK
IAkvKgogCSAqIGNyZWF0ZWRfdmNwdXMgaXMgcHJvdGVjdGVkIGJ5IGt2bS0+bG9jaywgYW5kIGlz
IGluY3JlbWVudGVkCiAJICogYXQgdGhlIGJlZ2lubmluZyBvZiBLVk1fQ1JFQVRFX1ZDUFUuICBv
bmxpbmVfdmNwdXMgaXMgb25seQpAQCAtOTY2LDYgKzk3MSwxMDQgQEAgaW50IGt2bV92Y3B1X3dy
aXRlX2d1ZXN0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ3BhX3QgZ3BhLCBjb25zdCB2b2lkICpk
YXRhLAogCQkJIHVuc2lnbmVkIGxvbmcgbGVuKTsKIHZvaWQga3ZtX3ZjcHVfbWFya19wYWdlX2Rp
cnR5KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuKTsKIAorLyoqCisgKiBrdm1fZ2Zu
X3RvX3Bmbl9jYWNoZV9pbml0IC0gcHJlcGFyZSBhIGNhY2hlZCBrZXJuZWwgbWFwcGluZyBhbmQg
SFBBIGZvciBhCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gZ3Vlc3QgcGh5
c2ljYWwgYWRkcmVzcy4KKyAqCisgKiBAa3ZtOgkgICBwb2ludGVyIHRvIGt2bSBpbnN0YW5jZS4K
KyAqIEBncGM6CSAgIHN0cnVjdCBnZm5fdG9fcGZuX2NhY2hlIG9iamVjdC4KKyAqIEB2Y3B1Ogkg
ICB2Q1BVIHRvIGJlIHVzZWQgZm9yIG1hcmtpbmcgcGFnZXMgZGlydHkgYW5kIHRvIGJlIHdva2Vu
IG9uCisgKgkJICAgaW52YWxpZGF0aW9uLgorICogQGd1ZXN0X3VzZXNfcGE6IGluZGljYXRlcyB0
aGF0IHRoZSByZXN1bHRpbmcgaG9zdCBwaHlzaWNhbCBQRk4gaXMgdXNlZCB3aGlsZQorICoJCSAg
IEB2Y3B1IGlzIElOX0dVRVNUX01PREUgc28gaW52YWxpZGF0aW9ucyBzaG91bGQgd2FrZSBpdC4K
KyAqIEBrZXJuZWxfbWFwOiAgICByZXF1ZXN0cyBhIGtlcm5lbCB2aXJ0dWFsIG1hcHBpbmcgKGtt
YXAgLyBtZW1yZW1hcCkuCisgKiBAZ3BhOgkgICBndWVzdCBwaHlzaWNhbCBhZGRyZXNzIHRvIG1h
cC4KKyAqIEBsZW46CSAgIHNhbml0eSBjaGVjazsgdGhlIHJhbmdlIGJlaW5nIGFjY2VzcyBtdXN0
IGZpdCBhIHNpbmdsZSBwYWdlLgorICogQGRpcnR5OiAgICAgICAgIG1hcmsgdGhlIGNhY2hlIGRp
cnR5IGltbWVkaWF0ZWx5LgorICoKKyAqIEByZXR1cm46CSAgIDAgZm9yIHN1Y2Nlc3MuCisgKgkJ
ICAgLUVJTlZBTCBmb3IgYSBtYXBwaW5nIHdoaWNoIHdvdWxkIGNyb3NzIGEgcGFnZSBib3VuZGFy
eS4KKyAqICAgICAgICAgICAgICAgICAtRUZBVUxUIGZvciBhbiB1bnRyYW5zbGF0YWJsZSBndWVz
dCBwaHlzaWNhbCBhZGRyZXNzLgorICoKKyAqIFRoaXMgcHJpbWVzIGEgZ2ZuX3RvX3Bmbl9jYWNo
ZSBhbmQgbGlua3MgaXQgaW50byB0aGUgQGt2bSdzIGxpc3QgZm9yCisgKiBpbnZhbGlkYXRpb25z
IHRvIGJlIHByb2Nlc3NlZC4gSW52YWxpZGF0aW9uIGNhbGxiYWNrcyB0byBAdmNwdSB1c2luZwor
ICogJUtWTV9SRVFfR1BDX0lOVkFMSURBVEUgd2lsbCBvY2N1ciBvbmx5IGZvciBNTVUgbm90aWZp
ZXJzLCBub3QgZm9yIEtWTQorICogbWVtc2xvdCBjaGFuZ2VzLiBDYWxsZXJzIGFyZSByZXF1aXJl
ZCB0byB1c2Uga3ZtX2dmbl90b19wZm5fY2FjaGVfY2hlY2soKQorICogdG8gZW5zdXJlIHRoYXQg
dGhlIGNhY2hlIGlzIHZhbGlkIGJlZm9yZSBhY2Nlc3NpbmcgdGhlIHRhcmdldCBwYWdlLgorICov
CitpbnQga3ZtX2dmbl90b19wZm5fY2FjaGVfaW5pdChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBn
Zm5fdG9fcGZuX2NhY2hlICpncGMsCisJCQkgICAgICBzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGJv
b2wgZ3Vlc3RfdXNlc19wYSwKKwkJCSAgICAgIGJvb2wga2VybmVsX21hcCwgZ3BhX3QgZ3BhLCB1
bnNpZ25lZCBsb25nIGxlbiwKKwkJCSAgICAgIGJvb2wgZGlydHkpOworCisvKioKKyAqIGt2bV9n
Zm5fdG9fcGZuX2NhY2hlX2NoZWNrIC0gY2hlY2sgdmFsaWRpdHkgb2YgYSBnZm5fdG9fcGZuX2Nh
Y2hlLgorICoKKyAqIEBrdm06CSAgIHBvaW50ZXIgdG8ga3ZtIGluc3RhbmNlLgorICogQGdwYzoJ
ICAgc3RydWN0IGdmbl90b19wZm5fY2FjaGUgb2JqZWN0LgorICogQGdwYToJICAgY3VycmVudCBn
dWVzdCBwaHlzaWNhbCBhZGRyZXNzIHRvIG1hcC4KKyAqIEBsZW46CSAgIHNhbml0eSBjaGVjazsg
dGhlIHJhbmdlIGJlaW5nIGFjY2VzcyBtdXN0IGZpdCBhIHNpbmdsZSBwYWdlLgorICogQGRpcnR5
OiAgICAgICAgIG1hcmsgdGhlIGNhY2hlIGRpcnR5IGltbWVkaWF0ZWx5LgorICoKKyAqIEByZXR1
cm46CSAgICV0cnVlIGlmIHRoZSBjYWNoZSBpcyBzdGlsbCB2YWxpZCBhbmQgdGhlIGFkZHJlc3Mg
bWF0Y2hlcy4KKyAqCQkgICAlZmFsc2UgaWYgdGhlIGNhY2hlIGlzIG5vdCB2YWxpZC4KKyAqCisg
KiBDYWxsZXJzIG91dHNpZGUgSU5fR1VFU1RfTU9ERSBjb250ZXh0IHNob3VsZCBob2xkIGEgcmVh
ZCBsb2NrIG9uIEBncGMtPmxvY2sKKyAqIHdoaWxlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgYW5k
IHRoZW4gY29udGludWUgdG8gaG9sZCB0aGUgbG9jayB1bnRpbCB0aGUKKyAqIGFjY2VzcyBpcyBj
b21wbGV0ZS4KKyAqCisgKiBDYWxsZXJzIGluIElOX0dVRVNUX01PREUgbWF5IGRvIHNvIHdpdGhv
dXQgbG9ja2luZywgYWx0aG91Z2ggdGhleSBzaG91bGQKKyAqIHN0aWxsIGhvbGQgYSByZWFkIGxv
Y2sgb24ga3ZtLT5zY3J1IGZvciB0aGUgbWVtc2xvdCBjaGVja3MuCisgKi8KK2Jvb2wga3ZtX2dm
bl90b19wZm5fY2FjaGVfY2hlY2soc3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9j
YWNoZSAqZ3BjLAorCQkJCWdwYV90IGdwYSwgdW5zaWduZWQgbG9uZyBsZW4pOworCisvKioKKyAq
IGt2bV9nZm5fdG9fcGZuX2NhY2hlX3JlZnJlc2ggLSB1cGRhdGUgYSBwcmV2aW91c2x5IGluaXRp
YWxpemVkIGNhY2hlLgorICoKKyAqIEBrdm06CSAgIHBvaW50ZXIgdG8ga3ZtIGluc3RhbmNlLgor
ICogQGdwYzoJICAgc3RydWN0IGdmbl90b19wZm5fY2FjaGUgb2JqZWN0LgorICogQGdwYToJICAg
dXBkYXRlZCBndWVzdCBwaHlzaWNhbCBhZGRyZXNzIHRvIG1hcC4KKyAqIEBsZW46CSAgIHNhbml0
eSBjaGVjazsgdGhlIHJhbmdlIGJlaW5nIGFjY2VzcyBtdXN0IGZpdCBhIHNpbmdsZSBwYWdlLgor
ICogQGRpcnR5OiAgICAgICAgIG1hcmsgdGhlIGNhY2hlIGRpcnR5IGltbWVkaWF0ZWx5LgorICoK
KyAqIEByZXR1cm46CSAgIDAgZm9yIHN1Y2Nlc3MuCisgKgkJICAgLUVJTlZBTCBmb3IgYSBtYXBw
aW5nIHdoaWNoIHdvdWxkIGNyb3NzIGEgcGFnZSBib3VuZGFyeS4KKyAqICAgICAgICAgICAgICAg
ICAtRUZBVUxUIGZvciBhbiB1bnRyYW5zbGF0YWJsZSBndWVzdCBwaHlzaWNhbCBhZGRyZXNzLgor
ICoKKyAqIFRoaXMgd2lsbCBhdHRlbXB0IHRvIHJlZnJlc2ggYSBnZm5fdG9fcGZuX2NhY2hlLiBO
b3RlIHRoYXQgYSBzdWNjZXNzZnVsCisgKiByZXR1cm0gZnJvbSB0aGlzIGZ1bmN0aW9uIGRvZXMg
bm90IG1lYW4gdGhlIHBhZ2UgY2FuIGJlIGltbWVkaWF0ZWx5CisgKiBhY2Nlc3NlZCBiZWNhdXNl
IGl0IG1heSBoYXZlIHJhY2VkIHdpdGggYW4gaW52YWxpZGF0aW9uLiBDYWxsZXJzIG11c3QKKyAq
IHN0aWxsIGxvY2sgYW5kIGNoZWNrIHRoZSBjYWNoZSBzdGF0dXMsIGFzIHRoaXMgZnVuY3Rpb24g
ZG9lcyBub3QgcmV0dXJuCisgKiB3aXRoIHRoZSBsb2NrIHN0aWxsIGhlbGQgdG8gcGVybWl0IGFj
Y2Vzcy4KKyAqLworaW50IGt2bV9nZm5fdG9fcGZuX2NhY2hlX3JlZnJlc2goc3RydWN0IGt2bSAq
a3ZtLCBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAqZ3BjLAorCQkJCSBncGFfdCBncGEsIHVuc2ln
bmVkIGxvbmcgbGVuLCBib29sIGRpcnR5KTsKKworLyoqCisgKiBrdm1fZ2ZuX3RvX3Bmbl9jYWNo
ZV91bm1hcCAtIHRlbXBvcmFyaWx5IHVubWFwIGEgZ2ZuX3RvX3Bmbl9jYWNoZS4KKyAqCisgKiBA
a3ZtOgkgICBwb2ludGVyIHRvIGt2bSBpbnN0YW5jZS4KKyAqIEBncGM6CSAgIHN0cnVjdCBnZm5f
dG9fcGZuX2NhY2hlIG9iamVjdC4KKyAqCisgKiBUaGlzIHVubWFwcyB0aGUgcmVmZXJlbmNlZCBw
YWdlIGFuZCBtYXJrcyBpdCBkaXJ0eSwgaWYgYXBwcm9wcmlhdGUuIFRoZQorICogY2FjaGUgaXMg
bGVmdCBpbiB0aGUgaW52YWxpZCBzdGF0ZSBidXQgYXQgbGVhc3QgdGhlIG1hcHBpbmcgZnJvbSBH
UEEgdG8KKyAqIHVzZXJzcGFjZSBIVkEgd2lsbCByZW1haW4gY2FjaGVkIGFuZCBjYW4gYmUgcmV1
c2VkIG9uIGEgc3Vic2VxdWVudAorICogcmVmcmVzaC4KKyAqLwordm9pZCBrdm1fZ2ZuX3RvX3Bm
bl9jYWNoZV91bm1hcChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBnZm5fdG9fcGZuX2NhY2hlICpn
cGMpOworCisvKioKKyAqIGt2bV9nZm5fdG9fcGZuX2NhY2hlX2Rlc3Ryb3kgLSBkZXN0cm95IGFu
ZCB1bmxpbmsgYSBnZm5fdG9fcGZuX2NhY2hlLgorICoKKyAqIEBrdm06CSAgIHBvaW50ZXIgdG8g
a3ZtIGluc3RhbmNlLgorICogQGdwYzoJICAgc3RydWN0IGdmbl90b19wZm5fY2FjaGUgb2JqZWN0
LgorICoKKyAqIFRoaXMgcmVtb3ZlcyBhIGNhY2hlIGZyb20gdGhlIEBrdm0ncyBsaXN0IHRvIGJl
IHByb2Nlc3NlZCBvbiBNTVUgbm90aWZpZXIKKyAqIGludm9jYXRpb24uCisgKi8KK3ZvaWQga3Zt
X2dmbl90b19wZm5fY2FjaGVfZGVzdHJveShzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBnZm5fdG9f
cGZuX2NhY2hlICpncGMpOworCiB2b2lkIGt2bV9zaWdzZXRfYWN0aXZhdGUoc3RydWN0IGt2bV92
Y3B1ICp2Y3B1KTsKIHZvaWQga3ZtX3NpZ3NldF9kZWFjdGl2YXRlKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSk7CiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgva3ZtX3R5cGVzLmggYi9pbmNsdWRl
L2xpbnV4L2t2bV90eXBlcy5oCmluZGV4IDIzNGVhYjA1OTgzOS4uMjJhNTJlZjEyYjRkIDEwMDY0
NAotLS0gYS9pbmNsdWRlL2xpbnV4L2t2bV90eXBlcy5oCisrKyBiL2luY2x1ZGUvbGludXgva3Zt
X3R5cGVzLmgKQEAgLTE5LDYgKzE5LDcgQEAgc3RydWN0IGt2bV9tZW1zbG90czsKIGVudW0ga3Zt
X21yX2NoYW5nZTsKIAogI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CisjaW5jbHVkZSA8bGludXgv
c3BpbmxvY2tfdHlwZXMuaD4KIAogI2luY2x1ZGUgPGFzbS9rdm1fdHlwZXMuaD4KIApAQCAtNTMs
NiArNTQsMjMgQEAgc3RydWN0IGdmbl90b19odmFfY2FjaGUgewogCXN0cnVjdCBrdm1fbWVtb3J5
X3Nsb3QgKm1lbXNsb3Q7CiB9OwogCitzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSB7CisJdTY0IGdl
bmVyYXRpb247CisJZ3BhX3QgZ3BhOworCXVuc2lnbmVkIGxvbmcgdWh2YTsKKwlzdHJ1Y3Qga3Zt
X21lbW9yeV9zbG90ICptZW1zbG90OworCXN0cnVjdCBrdm1fdmNwdSAqdmNwdTsKKwlzdHJ1Y3Qg
bGlzdF9oZWFkIGxpc3Q7CisJcndsb2NrX3QgbG9jazsKKwl2b2lkICpraHZhOworCWt2bV9wZm5f
dCBwZm47CisJYm9vbCBhY3RpdmU7CisJYm9vbCB2YWxpZDsKKwlib29sIGRpcnR5OworCWJvb2wg
a2VybmVsX21hcDsKKwlib29sIGd1ZXN0X3VzZXNfcGE7Cit9OworCiAjaWZkZWYgS1ZNX0FSQ0hf
TlJfT0JKU19QRVJfTUVNT1JZX0NBQ0hFCiAvKgogICogTWVtb3J5IGNhY2hlcyBhcmUgdXNlZCB0
byBwcmVhbGxvY2F0ZSBtZW1vcnkgYWhlYWQgb2YgdmFyaW91cyBNTVUgZmxvd3MsCmRpZmYgLS1n
aXQgYS92aXJ0L2t2bS9LY29uZmlnIGIvdmlydC9rdm0vS2NvbmZpZwppbmRleCA5N2NmNTQxM2Fj
MjUuLmY0ODM0YzIwZTRhNiAxMDA2NDQKLS0tIGEvdmlydC9rdm0vS2NvbmZpZworKysgYi92aXJ0
L2t2bS9LY29uZmlnCkBAIC00LDYgKzQsOSBAQAogY29uZmlnIEhBVkVfS1ZNCiAgICAgICAgYm9v
bAogCitjb25maWcgSEFWRV9LVk1fUEZOQ0FDSEUKKyAgICAgICBib29sCisKIGNvbmZpZyBIQVZF
X0tWTV9JUlFDSElQCiAgICAgICAgYm9vbAogCmRpZmYgLS1naXQgYS92aXJ0L2t2bS9NYWtlZmls
ZS5rdm0gYi92aXJ0L2t2bS9NYWtlZmlsZS5rdm0KaW5kZXggZmZkY2FkM2NjOTdhLi4yYzI3ZDVk
MGMzNjcgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL01ha2VmaWxlLmt2bQorKysgYi92aXJ0L2t2bS9N
YWtlZmlsZS5rdm0KQEAgLTExLDMgKzExLDQgQEAga3ZtLSQoQ09ORklHX0tWTV9NTUlPKSArPSAk
KEtWTSkvY29hbGVzY2VkX21taW8ubwoga3ZtLSQoQ09ORklHX0tWTV9BU1lOQ19QRikgKz0gJChL
Vk0pL2FzeW5jX3BmLm8KIGt2bS0kKENPTkZJR19IQVZFX0tWTV9JUlFfUk9VVElORykgKz0gJChL
Vk0pL2lycWNoaXAubwoga3ZtLSQoQ09ORklHX0hBVkVfS1ZNX0RJUlRZX1JJTkcpICs9ICQoS1ZN
KS9kaXJ0eV9yaW5nLm8KK2t2bS0kKENPTkZJR19IQVZFX0tWTV9QRk5DQUNIRSkgKz0gJChLVk0p
L3BmbmNhY2hlLm8KZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2RpcnR5X3JpbmcuYyBiL3ZpcnQva3Zt
L2RpcnR5X3JpbmcuYwppbmRleCA4ZTk4NzQ3NjBmYjMuLjIyMmVjYzgxZDdkZiAxMDA2NDQKLS0t
IGEvdmlydC9rdm0vZGlydHlfcmluZy5jCisrKyBiL3ZpcnQva3ZtL2RpcnR5X3JpbmcuYwpAQCAt
OSw3ICs5LDcgQEAKICNpbmNsdWRlIDxsaW51eC92bWFsbG9jLmg+CiAjaW5jbHVkZSA8bGludXgv
a3ZtX2RpcnR5X3JpbmcuaD4KICNpbmNsdWRlIDx0cmFjZS9ldmVudHMva3ZtLmg+Ci0jaW5jbHVk
ZSAibW11X2xvY2suaCIKKyNpbmNsdWRlICJrdm1fbW0uaCIKIAogaW50IF9fd2VhayBrdm1fY3B1
X2RpcnR5X2xvZ19zaXplKHZvaWQpCiB7CmRpZmYgLS1naXQgYS92aXJ0L2t2bS9rdm1fbWFpbi5j
IGIvdmlydC9rdm0va3ZtX21haW4uYwppbmRleCA4ZWI4Yzk2MjgzOGQuLmU2Mzk0ODE0NTZiOCAx
MDA2NDQKLS0tIGEvdmlydC9rdm0va3ZtX21haW4uYworKysgYi92aXJ0L2t2bS9rdm1fbWFpbi5j
CkBAIC01OSw3ICs1OSw3IEBACiAKICNpbmNsdWRlICJjb2FsZXNjZWRfbW1pby5oIgogI2luY2x1
ZGUgImFzeW5jX3BmLmgiCi0jaW5jbHVkZSAibW11X2xvY2suaCIKKyNpbmNsdWRlICJrdm1fbW0u
aCIKICNpbmNsdWRlICJ2ZmlvLmgiCiAKICNkZWZpbmUgQ1JFQVRFX1RSQUNFX1BPSU5UUwpAQCAt
Njg0LDYgKzY4NCw5IEBAIHN0YXRpYyBpbnQga3ZtX21tdV9ub3RpZmllcl9pbnZhbGlkYXRlX3Jh
bmdlX3N0YXJ0KHN0cnVjdCBtbXVfbm90aWZpZXIgKm1uLAogCWt2bS0+bW5fYWN0aXZlX2ludmFs
aWRhdGVfY291bnQrKzsKIAlzcGluX3VubG9jaygma3ZtLT5tbl9pbnZhbGlkYXRlX2xvY2spOwog
CisJZ2ZuX3RvX3Bmbl9jYWNoZV9pbnZhbGlkYXRlX3N0YXJ0KGt2bSwgcmFuZ2UtPnN0YXJ0LCBy
YW5nZS0+ZW5kLAorCQkJCQkgIGh2YV9yYW5nZS5tYXlfYmxvY2spOworCiAJX19rdm1faGFuZGxl
X2h2YV9yYW5nZShrdm0sICZodmFfcmFuZ2UpOwogCiAJcmV0dXJuIDA7CkBAIC0xMDUxLDYgKzEw
NTQsOSBAQCBzdGF0aWMgc3RydWN0IGt2bSAqa3ZtX2NyZWF0ZV92bSh1bnNpZ25lZCBsb25nIHR5
cGUpCiAJc3Bpbl9sb2NrX2luaXQoJmt2bS0+bW5faW52YWxpZGF0ZV9sb2NrKTsKIAlyY3V3YWl0
X2luaXQoJmt2bS0+bW5fbWVtc2xvdHNfdXBkYXRlX3JjdXdhaXQpOwogCisJSU5JVF9MSVNUX0hF
QUQoJmt2bS0+Z3BjX2xpc3QpOworCXNwaW5fbG9ja19pbml0KCZrdm0tPmdwY19sb2NrKTsKKwog
CUlOSVRfTElTVF9IRUFEKCZrdm0tPmRldmljZXMpOwogCiAJQlVJTERfQlVHX09OKEtWTV9NRU1f
U0xPVFNfTlVNID4gU0hSVF9NQVgpOwpAQCAtMjQwNiw4ICsyNDEyLDggQEAgc3RhdGljIGludCBo
dmFfdG9fcGZuX3JlbWFwcGVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogICogMik6IEB3
cml0ZV9mYXVsdCA9IGZhbHNlICYmIEB3cml0YWJsZSwgQHdyaXRhYmxlIHdpbGwgdGVsbCB0aGUg
Y2FsbGVyCiAgKiAgICAgd2hldGhlciB0aGUgbWFwcGluZyBpcyB3cml0YWJsZS4KICAqLwotc3Rh
dGljIGt2bV9wZm5fdCBodmFfdG9fcGZuKHVuc2lnbmVkIGxvbmcgYWRkciwgYm9vbCBhdG9taWMs
IGJvb2wgKmFzeW5jLAotCQkJYm9vbCB3cml0ZV9mYXVsdCwgYm9vbCAqd3JpdGFibGUpCitrdm1f
cGZuX3QgaHZhX3RvX3Bmbih1bnNpZ25lZCBsb25nIGFkZHIsIGJvb2wgYXRvbWljLCBib29sICph
c3luYywKKwkJICAgICBib29sIHdyaXRlX2ZhdWx0LCBib29sICp3cml0YWJsZSkKIHsKIAlzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYTsKIAlrdm1fcGZuX3QgcGZuID0gMDsKZGlmZiAtLWdpdCBh
L3ZpcnQva3ZtL21tdV9sb2NrLmggYi92aXJ0L2t2bS9rdm1fbW0uaApzaW1pbGFyaXR5IGluZGV4
IDU1JQpyZW5hbWUgZnJvbSB2aXJ0L2t2bS9tbXVfbG9jay5oCnJlbmFtZSB0byB2aXJ0L2t2bS9r
dm1fbW0uaAppbmRleCA5ZTEzMDhmOTczNGMuLmI5NzZlNGIwN2U4OCAxMDA2NDQKLS0tIGEvdmly
dC9rdm0vbW11X2xvY2suaAorKysgYi92aXJ0L2t2bS9rdm1fbW0uaApAQCAtMSw3ICsxLDcgQEAK
IC8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wLW9ubHkKIAotI2lmbmRlZiBLVk1f
TU1VX0xPQ0tfSAotI2RlZmluZSBLVk1fTU1VX0xPQ0tfSCAxCisjaWZuZGVmIF9fS1ZNX01NX0hf
XworI2RlZmluZSBfX0tWTV9NTV9IX18gMQogCiAvKgogICogQXJjaGl0ZWN0dXJlcyBjYW4gY2hv
b3NlIHdoZXRoZXIgdG8gdXNlIGFuIHJ3bG9jayBvciBzcGlubG9jawpAQCAtMjAsNCArMjAsMjEg
QEAKICNkZWZpbmUgS1ZNX01NVV9VTkxPQ0soa3ZtKSAgICBzcGluX3VubG9jaygmKGt2bSktPm1t
dV9sb2NrKQogI2VuZGlmIC8qIEtWTV9IQVZFX01NVV9SV0xPQ0sgKi8KIAotI2VuZGlmCitrdm1f
cGZuX3QgaHZhX3RvX3Bmbih1bnNpZ25lZCBsb25nIGFkZHIsIGJvb2wgYXRvbWljLCBib29sICph
c3luYywKKwkJICAgICBib29sIHdyaXRlX2ZhdWx0LCBib29sICp3cml0YWJsZSk7CisKKyNpZmRl
ZiBDT05GSUdfSEFWRV9LVk1fUEZOQ0FDSEUKK3ZvaWQgZ2ZuX3RvX3Bmbl9jYWNoZV9pbnZhbGlk
YXRlX3N0YXJ0KHN0cnVjdCBrdm0gKmt2bSwKKwkJCQkgICAgICAgdW5zaWduZWQgbG9uZyBzdGFy
dCwKKwkJCQkgICAgICAgdW5zaWduZWQgbG9uZyBlbmQsCisJCQkJICAgICAgIGJvb2wgbWF5X2Js
b2NrKTsKKyNlbHNlCitzdGF0aWMgaW5saW5lIHZvaWQgZ2ZuX3RvX3Bmbl9jYWNoZV9pbnZhbGlk
YXRlX3N0YXJ0KHN0cnVjdCBrdm0gKmt2bSwKKwkJCQkJCSAgICAgdW5zaWduZWQgbG9uZyBzdGFy
dCwKKwkJCQkJCSAgICAgdW5zaWduZWQgbG9uZyBlbmQsCisJCQkJCQkgICAgIGJvb2wgbWF5X2Js
b2NrKQoreworfQorI2VuZGlmIC8qIEhBVkVfS1ZNX1BGTkNBQ0hFICovCisKKyNlbmRpZiAvKiBf
X0tWTV9NTV9IX18gKi8KZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL3BmbmNhY2hlLmMgYi92aXJ0L2t2
bS9wZm5jYWNoZS5jCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uNWZj
YmNlMmE1Mzg1Ci0tLSAvZGV2L251bGwKKysrIGIvdmlydC9rdm0vcGZuY2FjaGUuYwpAQCAtMCww
ICsxLDMxOCBAQAorLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAtb25seQorLyoK
KyAqIEtlcm5lbC1iYXNlZCBWaXJ0dWFsIE1hY2hpbmUgZHJpdmVyIGZvciBMaW51eAorICoKKyAq
IFRoaXMgbW9kdWxlIGVuYWJsZXMga2VybmVsIGFuZCBndWVzdC1tb2RlIHZDUFUgYWNjZXNzIHRv
IGd1ZXN0IHBoeXNpY2FsCisgKiBtZW1vcnkgd2l0aCBzdWl0YWJsZSBpbnZhbGlkYXRpb24gbWVj
aGFuaXNtcy4KKyAqCisgKiBDb3B5cmlnaHQgwqkgMjAyMSBBbWF6b24uY29tLCBJbmMuIG9yIGl0
cyBhZmZpbGlhdGVzLgorICoKKyAqIEF1dGhvcnM6CisgKiAgIERhdmlkIFdvb2Rob3VzZSA8ZHdt
dzJAaW5mcmFkZWFkLm9yZz4KKyAqLworCisjaW5jbHVkZSA8bGludXgva3ZtX2hvc3QuaD4KKyNp
bmNsdWRlIDxsaW51eC9rdm0uaD4KKyNpbmNsdWRlIDxsaW51eC9oaWdobWVtLmg+CisjaW5jbHVk
ZSA8bGludXgvbW9kdWxlLmg+CisjaW5jbHVkZSA8bGludXgvZXJybm8uaD4KKworI2luY2x1ZGUg
Imt2bV9tbS5oIgorCisvKgorICogTU1VIG5vdGlmaWVyICdpbnZhbGlkYXRlX3JhbmdlX3N0YXJ0
JyBob29rLgorICovCit2b2lkIGdmbl90b19wZm5fY2FjaGVfaW52YWxpZGF0ZV9zdGFydChzdHJ1
Y3Qga3ZtICprdm0sIHVuc2lnbmVkIGxvbmcgc3RhcnQsCisJCQkJICAgICAgIHVuc2lnbmVkIGxv
bmcgZW5kLCBib29sIG1heV9ibG9jaykKK3sKKwlERUNMQVJFX0JJVE1BUCh2Y3B1X2JpdG1hcCwg
S1ZNX01BWF9WQ1BVUyk7CisJc3RydWN0IGdmbl90b19wZm5fY2FjaGUgKmdwYzsKKwlib29sIHdh
a2VfdmNwdXMgPSBmYWxzZTsKKworCXNwaW5fbG9jaygma3ZtLT5ncGNfbG9jayk7CisJbGlzdF9m
b3JfZWFjaF9lbnRyeShncGMsICZrdm0tPmdwY19saXN0LCBsaXN0KSB7CisJCXdyaXRlX2xvY2tf
aXJxKCZncGMtPmxvY2spOworCisJCS8qIE9ubHkgYSBzaW5nbGUgcGFnZSBzbyBubyBuZWVkIHRv
IGNhcmUgYWJvdXQgbGVuZ3RoICovCisJCWlmIChncGMtPnZhbGlkICYmICFpc19lcnJvcl9ub3Ns
b3RfcGZuKGdwYy0+cGZuKSAmJgorCQkgICAgZ3BjLT51aHZhID49IHN0YXJ0ICYmIGdwYy0+dWh2
YSA8IGVuZCkgeworCQkJZ3BjLT52YWxpZCA9IGZhbHNlOworCisJCQkvKgorCQkJICogSWYgYSBn
dWVzdCB2Q1BVIGNvdWxkIGJlIHVzaW5nIHRoZSBwaHlzaWNhbCBhZGRyZXNzLAorCQkJICogaXQg
bmVlZHMgdG8gYmUgd29rZW4uCisJCQkgKi8KKwkJCWlmIChncGMtPmd1ZXN0X3VzZXNfcGEpIHsK
KwkJCQlpZiAoIXdha2VfdmNwdXMpIHsKKwkJCQkJd2FrZV92Y3B1cyA9IHRydWU7CisJCQkJCWJp
dG1hcF96ZXJvKHZjcHVfYml0bWFwLCBLVk1fTUFYX1ZDUFVTKTsKKwkJCQl9CisJCQkJX19zZXRf
Yml0KGdwYy0+dmNwdS0+dmNwdV9pZHgsIHZjcHVfYml0bWFwKTsKKwkJCX0KKworCQkJLyoKKwkJ
CSAqIFdlIGNhbm5vdCBjYWxsIG1hcmtfcGFnZV9kaXJ0eSgpIGZyb20gaGVyZSBiZWNhdXNlCisJ
CQkgKiB0aGlzIHBoeXNpY2FsIENQVSBtaWdodCBub3QgaGF2ZSBhbiBhY3RpdmUgdkNQVQorCQkJ
ICogd2l0aCB3aGljaCB0byBkbyB0aGUgS1ZNIGRpcnR5IHRyYWNraW5nLgorCQkJICoKKwkJCSAq
IE5laXRoZXIgaXMgdGhlcmUgYW55IHBvaW50IGluIHRlbGxpbmcgdGhlIGtlcm5lbCBNTQorCQkJ
ICogdGhhdCB0aGUgdW5kZXJseWluZyBwYWdlIGlzIGRpcnR5LiBBIHZDUFUgaW4gZ3Vlc3QKKwkJ
CSAqIG1vZGUgbWlnaHQgc3RpbGwgYmUgd3JpdGluZyB0byBpdCB1cCB0byB0aGUgcG9pbnQKKwkJ
CSAqIHdoZXJlIHdlIHdha2UgdGhlbSBhIGZldyBsaW5lcyBmdXJ0aGVyIGRvd24gYW55d2F5Lgor
CQkJICoKKwkJCSAqIFNvIGFsbCB0aGUgZGlydHkgbWFya2luZyBoYXBwZW5zIG9uIHRoZSB1bm1h
cC4KKwkJCSAqLworCQl9CisJCXdyaXRlX3VubG9ja19pcnEoJmdwYy0+bG9jayk7CisJfQorCXNw
aW5fdW5sb2NrKCZrdm0tPmdwY19sb2NrKTsKKworCWlmICh3YWtlX3ZjcHVzKSB7CisJCXVuc2ln
bmVkIGludCByZXEgPSBLVk1fUkVRX0dQQ19JTlZBTElEQVRFOworCQlib29sIGNhbGxlZDsKKwor
CQkvKgorCQkgKiBJZiB0aGUgT09NIHJlYXBlciBpcyBhY3RpdmUsIHRoZW4gYWxsIHZDUFVzIHNo
b3VsZCBoYXZlCisJCSAqIGJlZW4gc3RvcHBlZCBhbHJlYWR5LCBzbyBwZXJmb3JtIHRoZSByZXF1
ZXN0IHdpdGhvdXQKKwkJICogS1ZNX1JFUVVFU1RfV0FJVCBhbmQgYmUgc2FkIGlmIGFueSBuZWVk
ZWQgdG8gYmUgd29rZW4uCisJCSAqLworCQlpZiAoIW1heV9ibG9jaykKKwkJCXJlcSAmPSB+S1ZN
X1JFUVVFU1RfV0FJVDsKKworCQljYWxsZWQgPSBrdm1fbWFrZV92Y3B1c19yZXF1ZXN0X21hc2so
a3ZtLCByZXEsIHZjcHVfYml0bWFwKTsKKworCQlXQVJOX09OX09OQ0UoY2FsbGVkICYmICFtYXlf
YmxvY2spOworCX0KK30KKworYm9vbCBrdm1fZ2ZuX3RvX3Bmbl9jYWNoZV9jaGVjayhzdHJ1Y3Qg
a3ZtICprdm0sIHN0cnVjdCBnZm5fdG9fcGZuX2NhY2hlICpncGMsCisJCQkJZ3BhX3QgZ3BhLCB1
bnNpZ25lZCBsb25nIGxlbikKK3sKKwlzdHJ1Y3Qga3ZtX21lbXNsb3RzICpzbG90cyA9IGt2bV9t
ZW1zbG90cyhrdm0pOworCisJaWYgKChncGEgJiB+UEFHRV9NQVNLKSArIGxlbiA+IFBBR0VfU0la
RSkKKwkJcmV0dXJuIGZhbHNlOworCisJaWYgKGdwYy0+Z3BhICE9IGdwYSB8fCBncGMtPmdlbmVy
YXRpb24gIT0gc2xvdHMtPmdlbmVyYXRpb24gfHwKKwkgICAga3ZtX2lzX2Vycm9yX2h2YShncGMt
PnVodmEpKQorCQlyZXR1cm4gZmFsc2U7CisKKwlpZiAoIWdwYy0+dmFsaWQpCisJCXJldHVybiBm
YWxzZTsKKworCXJldHVybiB0cnVlOworfQorRVhQT1JUX1NZTUJPTF9HUEwoa3ZtX2dmbl90b19w
Zm5fY2FjaGVfY2hlY2spOworCitzdGF0aWMgdm9pZCBfX3JlbGVhc2VfZ3BjKHN0cnVjdCBrdm0g
Kmt2bSwga3ZtX3Bmbl90IHBmbiwgdm9pZCAqa2h2YSwKKwkJCSAgZ3BhX3QgZ3BhLCBib29sIGRp
cnR5KQoreworCS8qIFVubWFwIHRoZSBvbGQgcGFnZSBpZiBpdCB3YXMgbWFwcGVkIGJlZm9yZSAq
LworCWlmICghaXNfZXJyb3Jfbm9zbG90X3BmbihwZm4pKSB7CisJCWlmIChwZm5fdmFsaWQocGZu
KSkgeworCQkJa3VubWFwKHBmbl90b19wYWdlKHBmbikpOworI2lmZGVmIENPTkZJR19IQVNfSU9N
RU0KKwkJfSBlbHNlIHsKKwkJCW1lbXVubWFwKGtodmEpOworI2VuZGlmCisJCX0KKworCQlrdm1f
cmVsZWFzZV9wZm4ocGZuLCBkaXJ0eSk7CisJCWlmIChkaXJ0eSkKKwkJCW1hcmtfcGFnZV9kaXJ0
eShrdm0sIGdwYSk7CisJfQorfQorCitpbnQga3ZtX2dmbl90b19wZm5fY2FjaGVfcmVmcmVzaChz
dHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBnZm5fdG9fcGZuX2NhY2hlICpncGMsCisJCQkJIGdwYV90
IGdwYSwgdW5zaWduZWQgbG9uZyBsZW4sIGJvb2wgZGlydHkpCit7CisJc3RydWN0IGt2bV9tZW1z
bG90cyAqc2xvdHMgPSBrdm1fbWVtc2xvdHMoa3ZtKTsKKwl1bnNpZ25lZCBsb25nIHBhZ2Vfb2Zm
c2V0ID0gZ3BhICYgflBBR0VfTUFTSzsKKwlrdm1fcGZuX3Qgb2xkX3BmbiwgbmV3X3BmbjsKKwl1
bnNpZ25lZCBsb25nIG9sZF91aHZhOworCWdwYV90IG9sZF9ncGE7CisJdm9pZCAqb2xkX2todmE7
CisJYm9vbCBvbGRfdmFsaWQsIG9sZF9kaXJ0eTsKKwlpbnQgcmV0ID0gMDsKKworCS8qCisJICog
SWYgbXVzdCBmaXQgd2l0aGluIGEgc2luZ2xlIHBhZ2UuIFRoZSAnbGVuJyBhcmd1bWVudCBpcwor
CSAqIG9ubHkgdG8gZW5mb3JjZSB0aGF0LgorCSAqLworCWlmIChwYWdlX29mZnNldCArIGxlbiA+
IFBBR0VfU0laRSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwl3cml0ZV9sb2NrX2lycSgmZ3BjLT5s
b2NrKTsKKworCW9sZF9ncGEgPSBncGMtPmdwYTsKKwlvbGRfcGZuID0gZ3BjLT5wZm47CisJb2xk
X2todmEgPSBncGMtPmtodmE7CisJb2xkX3VodmEgPSBncGMtPnVodmE7CisJb2xkX3ZhbGlkID0g
Z3BjLT52YWxpZDsKKwlvbGRfZGlydHkgPSBncGMtPmRpcnR5OworCisJLyogSWYgdGhlIHVzZXJz
cGFjZSBIVkEgaXMgaW52YWxpZCwgcmVmcmVzaCB0aGF0IGZpcnN0ICovCisJaWYgKGdwYy0+Z3Bh
ICE9IGdwYSB8fCBncGMtPmdlbmVyYXRpb24gIT0gc2xvdHMtPmdlbmVyYXRpb24gfHwKKwkgICAg
a3ZtX2lzX2Vycm9yX2h2YShncGMtPnVodmEpKSB7CisJCWdmbl90IGdmbiA9IGdwYV90b19nZm4o
Z3BhKTsKKworCQlncGMtPmRpcnR5ID0gZmFsc2U7CisJCWdwYy0+Z3BhID0gZ3BhOworCQlncGMt
PmdlbmVyYXRpb24gPSBzbG90cy0+Z2VuZXJhdGlvbjsKKwkJZ3BjLT5tZW1zbG90ID0gX19nZm5f
dG9fbWVtc2xvdChzbG90cywgZ2ZuKTsKKwkJZ3BjLT51aHZhID0gZ2ZuX3RvX2h2YV9tZW1zbG90
KGdwYy0+bWVtc2xvdCwgZ2ZuKTsKKworCQlpZiAoa3ZtX2lzX2Vycm9yX2h2YShncGMtPnVodmEp
KSB7CisJCQlyZXQgPSAtRUZBVUxUOworCQkJZ290byBvdXQ7CisJCX0KKworCQlncGMtPnVodmEg
Kz0gcGFnZV9vZmZzZXQ7CisJfQorCisJLyoKKwkgKiBJZiB0aGUgdXNlcnNwYWNlIEhWQSBjaGFu
Z2VkIG9yIHRoZSBQRk4gd2FzIGFscmVhZHkgaW52YWxpZCwKKwkgKiBkcm9wIHRoZSBsb2NrIGFu
ZCBkbyB0aGUgSFZBIHRvIFBGTiBsb29rdXAgYWdhaW4uCisJICovCisJaWYgKCFvbGRfdmFsaWQg
fHwgb2xkX3VodmEgIT0gZ3BjLT51aHZhKSB7CisJCXVuc2lnbmVkIGxvbmcgdWh2YSA9IGdwYy0+
dWh2YTsKKwkJdm9pZCAqbmV3X2todmEgPSBOVUxMOworCQl1bnNpZ25lZCBsb25nIG1tdV9zZXE7
CisJCWludCByZXRyeTsKKworCQkvKiBQbGFjZWhvbGRlcnMgZm9yICJodmEgaXMgdmFsaWQgYnV0
IG5vdCB5ZXQgbWFwcGVkIiAqLworCQlncGMtPnBmbiA9IEtWTV9QRk5fRVJSX0ZBVUxUOworCQln
cGMtPmtodmEgPSBOVUxMOworCQlncGMtPnZhbGlkID0gdHJ1ZTsKKworCQl3cml0ZV91bmxvY2tf
aXJxKCZncGMtPmxvY2spOworCisJcmV0cnlfbWFwOgorCQltbXVfc2VxID0ga3ZtLT5tbXVfbm90
aWZpZXJfc2VxOworCQlzbXBfcm1iKCk7CisKKwkJLyogV2UgYWx3YXlzIHJlcXVlc3QgYSB3cml0
ZWFibGUgbWFwcGluZyAqLworCQluZXdfcGZuID0gaHZhX3RvX3Bmbih1aHZhLCBmYWxzZSwgTlVM
TCwgdHJ1ZSwgTlVMTCk7CisJCWlmIChpc19lcnJvcl9ub3Nsb3RfcGZuKG5ld19wZm4pKSB7CisJ
CQlyZXQgPSAtRUZBVUxUOworCQkJZ290byBtYXBfZG9uZTsKKwkJfQorCisJCXJlYWRfbG9jaygm
a3ZtLT5tbXVfbG9jayk7CisJCXJldHJ5ID0gbW11X25vdGlmaWVyX3JldHJ5X2h2YShrdm0sIG1t
dV9zZXEsIHVodmEpOworCQlyZWFkX3VubG9jaygma3ZtLT5tbXVfbG9jayk7CisJCWlmIChyZXRy
eSkgeworCQkJY29uZF9yZXNjaGVkKCk7CisJCQlnb3RvIHJldHJ5X21hcDsKKwkJfQorCisJCWlm
IChncGMtPmtlcm5lbF9tYXApIHsKKwkJCWlmIChuZXdfcGZuID09IG9sZF9wZm4pIHsKKwkJCQlu
ZXdfa2h2YSA9ICh2b2lkICopKCh1bnNpZ25lZCBsb25nKW9sZF9raHZhIC0gcGFnZV9vZmZzZXQp
OworCQkJCW9sZF9wZm4gPSBLVk1fUEZOX0VSUl9GQVVMVDsKKwkJCQlvbGRfa2h2YSA9IE5VTEw7
CisJCQl9IGVsc2UgaWYgKHBmbl92YWxpZChuZXdfcGZuKSkgeworCQkJCW5ld19raHZhID0ga21h
cChwZm5fdG9fcGFnZShuZXdfcGZuKSk7CisjaWZkZWYgQ09ORklHX0hBU19JT01FTQorCQkJfSBl
bHNlIHsKKwkJCQluZXdfa2h2YSA9IG1lbXJlbWFwKHBmbl90b19ocGEobmV3X3BmbiksIFBBR0Vf
U0laRSwgTUVNUkVNQVBfV0IpOworI2VuZGlmCisJCQl9CisJCQlpZiAoIW5ld19raHZhKQorCQkJ
CXJldCA9IC1FRkFVTFQ7CisJCX0KKworCW1hcF9kb25lOgorCQl3cml0ZV9sb2NrX2lycSgmZ3Bj
LT5sb2NrKTsKKwkJaWYgKHJldCkgeworCQkJZ3BjLT52YWxpZCA9IGZhbHNlOworCQkJZ3BjLT5w
Zm4gPSBLVk1fUEZOX0VSUl9GQVVMVDsKKwkJCWdwYy0+a2h2YSA9IE5VTEw7CisJCX0gZWxzZSB7
CisJCQkvKiBBdCB0aGlzIHBvaW50LCBncGMtPnZhbGlkIG1heSBhbHJlYWR5IGhhdmUgYmVlbiBj
bGVhcmVkICovCisJCQlncGMtPnBmbiA9IG5ld19wZm47CisJCQlncGMtPmtodmEgPSBuZXdfa2h2
YSArIHBhZ2Vfb2Zmc2V0OworCQl9CisJfQorCisgb3V0OgorCWlmIChyZXQpCisJCWdwYy0+ZGly
dHkgPSBmYWxzZTsKKwllbHNlCisJCWdwYy0+ZGlydHkgPSBkaXJ0eTsKKworCXdyaXRlX3VubG9j
a19pcnEoJmdwYy0+bG9jayk7CisKKwlfX3JlbGVhc2VfZ3BjKGt2bSwgb2xkX3Bmbiwgb2xkX2to
dmEsIG9sZF9ncGEsIG9sZF9kaXJ0eSk7CisKKwlyZXR1cm4gcmV0OworfQorRVhQT1JUX1NZTUJP
TF9HUEwoa3ZtX2dmbl90b19wZm5fY2FjaGVfcmVmcmVzaCk7CisKK3ZvaWQga3ZtX2dmbl90b19w
Zm5fY2FjaGVfdW5tYXAoc3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAq
Z3BjKQoreworCXZvaWQgKm9sZF9raHZhOworCWt2bV9wZm5fdCBvbGRfcGZuOworCWJvb2wgb2xk
X2RpcnR5OworCWdwYV90IG9sZF9ncGE7CisKKwl3cml0ZV9sb2NrX2lycSgmZ3BjLT5sb2NrKTsK
KworCWdwYy0+dmFsaWQgPSBmYWxzZTsKKworCW9sZF9raHZhID0gZ3BjLT5raHZhOworCW9sZF9k
aXJ0eSA9IGdwYy0+ZGlydHk7CisJb2xkX2dwYSA9IGdwYy0+Z3BhOworCW9sZF9wZm4gPSBncGMt
PnBmbjsKKworCS8qCisJICogV2UgY2FuIGxlYXZlIHRoZSBHUEEg4oaSIHVIVkEgbWFwIGNhY2hl
IGludGFjdCBidXQgdGhlIFBGTgorCSAqIGxvb2t1cCB3aWxsIG5lZWQgdG8gYmUgcmVkb25lIGV2
ZW4gZm9yIHRoZSBzYW1lIHBhZ2UuCisJICovCisJZ3BjLT5raHZhID0gTlVMTDsKKwlncGMtPnBm
biA9IEtWTV9QRk5fRVJSX0ZBVUxUOworCisJd3JpdGVfdW5sb2NrX2lycSgmZ3BjLT5sb2NrKTsK
KworCV9fcmVsZWFzZV9ncGMoa3ZtLCBvbGRfcGZuLCBvbGRfa2h2YSwgb2xkX2dwYSwgb2xkX2Rp
cnR5KTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKGt2bV9nZm5fdG9fcGZuX2NhY2hlX3VubWFwKTsK
KworCitpbnQga3ZtX2dmbl90b19wZm5fY2FjaGVfaW5pdChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVj
dCBnZm5fdG9fcGZuX2NhY2hlICpncGMsCisJCQkgICAgICBzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUs
IGJvb2wgZ3Vlc3RfdXNlc19wYSwKKwkJCSAgICAgIGJvb2wga2VybmVsX21hcCwgZ3BhX3QgZ3Bh
LCB1bnNpZ25lZCBsb25nIGxlbiwKKwkJCSAgICAgIGJvb2wgZGlydHkpCit7CisJaWYgKCFncGMt
PmFjdGl2ZSkgeworCQlyd2xvY2tfaW5pdCgmZ3BjLT5sb2NrKTsKKworCQlncGMtPmtodmEgPSBO
VUxMOworCQlncGMtPnBmbiA9IEtWTV9QRk5fRVJSX0ZBVUxUOworCQlncGMtPnVodmEgPSBLVk1f
SFZBX0VSUl9CQUQ7CisJCWdwYy0+dmNwdSA9IHZjcHU7CisJCWdwYy0+a2VybmVsX21hcCA9IGtl
cm5lbF9tYXA7CisJCWdwYy0+Z3Vlc3RfdXNlc19wYSA9IGd1ZXN0X3VzZXNfcGE7CisJCWdwYy0+
dmFsaWQgPSBmYWxzZTsKKwkJZ3BjLT5hY3RpdmUgPSB0cnVlOworCisJCXNwaW5fbG9jaygma3Zt
LT5ncGNfbG9jayk7CisJCWxpc3RfYWRkKCZncGMtPmxpc3QsICZrdm0tPmdwY19saXN0KTsKKwkJ
c3Bpbl91bmxvY2soJmt2bS0+Z3BjX2xvY2spOworCX0KKwlyZXR1cm4ga3ZtX2dmbl90b19wZm5f
Y2FjaGVfcmVmcmVzaChrdm0sIGdwYywgZ3BhLCBsZW4sIGRpcnR5KTsKK30KK0VYUE9SVF9TWU1C
T0xfR1BMKGt2bV9nZm5fdG9fcGZuX2NhY2hlX2luaXQpOworCit2b2lkIGt2bV9nZm5fdG9fcGZu
X2NhY2hlX2Rlc3Ryb3koc3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAq
Z3BjKQoreworCWlmIChncGMtPmFjdGl2ZSkgeworCQlzcGluX2xvY2soJmt2bS0+Z3BjX2xvY2sp
OworCQlsaXN0X2RlbCgmZ3BjLT5saXN0KTsKKwkJc3Bpbl91bmxvY2soJmt2bS0+Z3BjX2xvY2sp
OworCisJCWt2bV9nZm5fdG9fcGZuX2NhY2hlX3VubWFwKGt2bSwgZ3BjKTsKKwkJZ3BjLT5hY3Rp
dmUgPSBmYWxzZTsKKwl9Cit9CitFWFBPUlRfU1lNQk9MX0dQTChrdm1fZ2ZuX3RvX3Bmbl9jYWNo
ZV9kZXN0cm95KTsKLS0gCjIuMzEuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX18Ka3ZtYXJtIG1haWxpbmcgbGlzdAprdm1hcm1AbGlzdHMuY3MuY29sdW1i
aWEuZWR1Cmh0dHBzOi8vbGlzdHMuY3MuY29sdW1iaWEuZWR1L21haWxtYW4vbGlzdGluZm8va3Zt
YXJtCg==
