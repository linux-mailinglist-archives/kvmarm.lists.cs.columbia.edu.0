Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 9E21922DED0
	for <lists+kvmarm@lfdr.de>; Sun, 26 Jul 2020 13:55:24 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 33F694B136;
	Sun, 26 Jul 2020 07:55:24 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -4.091
X-Spam-Level: 
X-Spam-Status: No, score=-4.091 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, DNS_FROM_AHBL_RHSBL=2.699, RCVD_IN_DNSWL_HI=-5,
	T_DKIM_INVALID=0.01] autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id WqC8tZSJJJXL; Sun, 26 Jul 2020 07:55:24 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id F0BBB4B744;
	Sun, 26 Jul 2020 07:55:22 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 3F5AE4B740
 for <kvmarm@lists.cs.columbia.edu>; Sun, 26 Jul 2020 07:55:21 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id MXxNSsMwmJl1 for <kvmarm@lists.cs.columbia.edu>;
 Sun, 26 Jul 2020 07:55:20 -0400 (EDT)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 16B1B4B73F
 for <kvmarm@lists.cs.columbia.edu>; Sun, 26 Jul 2020 07:55:20 -0400 (EDT)
Received: from disco-boy.misterjones.org (disco-boy.misterjones.org
 [51.254.78.96])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id EA32520714;
 Sun, 26 Jul 2020 11:55:18 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1595764519;
 bh=6aK/0YzeelgXVmJ2084ogyxnC3WG10x7SeQJK5zn1a4=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=k49dgWGn3LW6bHWnyPt4+LvqYxOP/J9ZNOTxdY11uv6Kg2Kv2WVw/M/mOEi2udDXX
 RA3htPnyuSwUNGUS1qeS47neiPahcgAciywDidYOFBGDGVW3o/mxe3koKzUsg+lima
 zaTO698rMjwL1cIfXpBf47iq6dkVstLvbE6d1SYs=
Received: from 78.163-31-62.static.virginmediabusiness.co.uk ([62.31.163.78]
 helo=wait-a-minute.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa
 (TLS1.3:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim 4.92)
 (envelope-from <maz@kernel.org>)
 id 1jzfFN-00F1VQ-Di; Sun, 26 Jul 2020 12:55:17 +0100
Date: Sun, 26 Jul 2020 12:55:16 +0100
Message-ID: <87sgdewkwr.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Will Deacon <will@kernel.org>
Subject: Re: [PATCH 5/7] KVM: arm64: Move 'invalid syndrome' logic out of
 io_mem_abort()
In-Reply-To: <20200724143506.17772-6-will@kernel.org>
References: <20200724143506.17772-1-will@kernel.org>
 <20200724143506.17772-6-will@kernel.org>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 EasyPG/1.0.0 Emacs/26.3
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 62.31.163.78
X-SA-Exim-Rcpt-To: will@kernel.org, kvmarm@lists.cs.columbia.edu,
 linux-arm-kernel@lists.infradead.org, kernel-team@android.com,
 qperret@google.com, james.morse@arm.com, suzuki.poulose@arm.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: kernel-team@android.com, kvmarm@lists.cs.columbia.edu,
 linux-arm-kernel@lists.infradead.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Fri, 24 Jul 2020 15:35:04 +0100,
Will Deacon <will@kernel.org> wrote:
> 
> In preparation for handling stage-2 faults on stage-1 page-table walks
> earlier, move the 'invalid syndrome' logic out of io_mem_abort() and
> into its own function, which can be called from kvm_handle_guest_abort()
> directly.
> 
> Cc: Marc Zyngier <maz@kernel.org>
> Cc: Quentin Perret <qperret@google.com>
> Signed-off-by: Will Deacon <will@kernel.org>
> ---
>  arch/arm64/kvm/mmio.c | 22 ----------------------
>  arch/arm64/kvm/mmu.c  | 32 ++++++++++++++++++++++++++++++++
>  2 files changed, 32 insertions(+), 22 deletions(-)
> 
> diff --git a/arch/arm64/kvm/mmio.c b/arch/arm64/kvm/mmio.c
> index b54ea5aa6c06..45a630e480e1 100644
> --- a/arch/arm64/kvm/mmio.c
> +++ b/arch/arm64/kvm/mmio.c
> @@ -136,28 +136,6 @@ int io_mem_abort(struct kvm_vcpu *vcpu, struct kvm_run *run,
>  	int len;
>  	u8 data_buf[8];
>  
> -	/*
> -	 * No valid syndrome? Ask userspace for help if it has
> -	 * volunteered to do so, and bail out otherwise.
> -	 */
> -	if (!kvm_vcpu_dabt_isvalid(vcpu)) {
> -		if (vcpu->kvm->arch.return_nisv_io_abort_to_user) {
> -			run->exit_reason = KVM_EXIT_ARM_NISV;
> -			run->arm_nisv.esr_iss = kvm_vcpu_dabt_iss_nisv_sanitized(vcpu);
> -			run->arm_nisv.fault_ipa = fault_ipa;
> -			return 0;
> -		}
> -
> -		kvm_pr_unimpl("Data abort outside memslots with no valid syndrome info\n");
> -		return -ENOSYS;
> -	}
> -
> -	/* Page table accesses IO mem: tell guest to fix its TTBR */
> -	if (kvm_vcpu_dabt_iss1tw(vcpu)) {
> -		kvm_inject_dabt(vcpu, kvm_vcpu_get_hfar(vcpu));
> -		return 1;
> -	}
> -
>  	/*
>  	 * Prepare MMIO operation. First decode the syndrome data we get
>  	 * from the CPU. Then try if some in-kernel emulation feels
> diff --git a/arch/arm64/kvm/mmu.c b/arch/arm64/kvm/mmu.c
> index 73e62d360a36..adb933ecd177 100644
> --- a/arch/arm64/kvm/mmu.c
> +++ b/arch/arm64/kvm/mmu.c
> @@ -2046,6 +2046,20 @@ static void handle_access_fault(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa)
>  		kvm_set_pfn_accessed(pfn);
>  }
>  
> +static int handle_error_invalid_dabt(struct kvm_vcpu *vcpu, struct kvm_run *run,

Nit: why the "_error_"? There isn't any error here, only an awkward
part of the architecture. I'd rather see something like
handle_nisv_dabt(), which matches what this function actually does.

> +				     phys_addr_t fault_ipa)
> +{
> +	if (!vcpu->kvm->arch.return_nisv_io_abort_to_user) {
> +		kvm_pr_unimpl("Data abort outside memslots with no valid syndrome info\n");
> +		return -ENOSYS;
> +	}
> +
> +	run->exit_reason = KVM_EXIT_ARM_NISV;
> +	run->arm_nisv.esr_iss = kvm_vcpu_dabt_iss_nisv_sanitized(vcpu);
> +	run->arm_nisv.fault_ipa = fault_ipa;
> +	return 0;
> +}
> +
>  /**
>   * kvm_handle_guest_abort - handles all 2nd stage aborts
>   * @vcpu:	the VCPU pointer
> @@ -2133,6 +2147,21 @@ int kvm_handle_guest_abort(struct kvm_vcpu *vcpu, struct kvm_run *run)
>  		 * of the page size.
>  		 */
>  		fault_ipa |= kvm_vcpu_get_hfar(vcpu) & ((1 << 12) - 1);
> +
> +		/*
> +		 * No valid syndrome? Ask userspace for help if it has
> +		 * volunteered to do so, and bail out otherwise.
> +		 */
> +		if (!kvm_vcpu_dabt_isvalid(vcpu)) {
> +			ret = handle_error_invalid_dabt(vcpu, run, fault_ipa);
> +			goto out_unlock;
> +		}
> +
> +		if (kvm_vcpu_dabt_iss1tw(vcpu)) {
> +			ret = -ENXIO;
> +			goto out;
> +		}
> +
>  		ret = io_mem_abort(vcpu, run, fault_ipa);
>  		goto out_unlock;
>  	}
> @@ -2153,6 +2182,9 @@ int kvm_handle_guest_abort(struct kvm_vcpu *vcpu, struct kvm_run *run)
>  	if (ret == -ENOEXEC) {
>  		kvm_inject_pabt(vcpu, kvm_vcpu_get_hfar(vcpu));
>  		ret = 1;
> +	} else if (ret == -ENXIO) {
> +		kvm_inject_dabt(vcpu, kvm_vcpu_get_hfar(vcpu));
> +		ret = 1;
>  	}
>  out_unlock:
>  	srcu_read_unlock(&vcpu->kvm->srcu, idx);
> -- 
> 2.28.0.rc0.142.g3c755180ce-goog
> 
> 

Otherwise looks OK.

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
