Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id EA03A577C62
	for <lists+kvmarm@lfdr.de>; Mon, 18 Jul 2022 09:20:36 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 40ADE4D2CB;
	Mon, 18 Jul 2022 03:20:36 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -1.789
X-Spam-Level: 
X-Spam-Status: No, score=-1.789 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, T_DKIM_INVALID=0.01, URIBL_BLOCKED=0.001]
	autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id MfXa1OuLk6-P; Mon, 18 Jul 2022 03:20:36 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id D02794D2C9;
	Mon, 18 Jul 2022 03:20:34 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id B0EDA4D2C2
 for <kvmarm@lists.cs.columbia.edu>; Mon, 18 Jul 2022 03:20:33 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id RSBV2dWZAVsN for <kvmarm@lists.cs.columbia.edu>;
 Mon, 18 Jul 2022 03:20:32 -0400 (EDT)
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 76DF54D2BE
 for <kvmarm@lists.cs.columbia.edu>; Mon, 18 Jul 2022 03:20:32 -0400 (EDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by dfw.source.kernel.org (Postfix) with ESMTPS id 5AA6861358;
 Mon, 18 Jul 2022 07:20:31 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id AF3DCC341C0;
 Mon, 18 Jul 2022 07:20:30 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1658128830;
 bh=HwCVC7i31nzH7rBtvRQvL24rveJVApXsIarHWo0LXKw=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=C0f6yg4a7U739G9TpadFTCWNpT/AFi47x5NE1OZ1Xh5qyS2rvsRi5qnSO1gqi+4Nq
 hODk+7bnZRZ60Z2JFzrCNRhXbD1wZfTOXHLd/GXZ3LUfMKfnF/zTgpLKzucL7A3hEI
 DudYCvR94GNcGK47MfHYNXvKWsFHVxlV/ZmENACqdvehxUXGWrYYLTajhvVe+cQwAu
 DykEWIsW9uftrctS82Ixh9KkmB7j2ekDSSXSRUhRmjRiy1HiKi1hglY3uu3YhhV8vg
 MgMKW48UFAFH52rfsRAVYrKm42DaxPsG2tPyXSy28Y99odfvzBkVMng41nwMyJz6Hc
 ohoHK/q1TksSQ==
Received: from 82-132-227-210.dab.02.net ([82.132.227.210]
 helo=wait-a-minute.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.95)
 (envelope-from <maz@kernel.org>) id 1oDL3M-0088Uj-Oz;
 Mon, 18 Jul 2022 08:20:28 +0100
Date: Mon, 18 Jul 2022 08:20:18 +0100
Message-ID: <87a69651l9.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Kalesh Singh <kaleshsingh@google.com>
Subject: Re: [PATCH v4 10/18] KVM: arm64: Stub implementation of pKVM HYP
 stack unwinder
In-Reply-To: <20220715061027.1612149-11-kaleshsingh@google.com>
References: <20220715061027.1612149-1-kaleshsingh@google.com>
 <20220715061027.1612149-11-kaleshsingh@google.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 82.132.227.210
X-SA-Exim-Rcpt-To: kaleshsingh@google.com, mark.rutland@arm.com,
 broonie@kernel.org, madvenka@linux.microsoft.com, will@kernel.org,
 qperret@google.com, tabba@google.com, james.morse@arm.com,
 alexandru.elisei@arm.com, suzuki.poulose@arm.com, catalin.marinas@arm.com,
 andreyknvl@gmail.com, russell.king@oracle.com, vincenzo.frascino@arm.com,
 mhiramat@kernel.org, ast@kernel.org, drjones@redhat.com,
 wangkefeng.wang@huawei.com, elver@google.com, keirf@google.com,
 yuzenghui@huawei.com, ardb@kernel.org, oupton@google.com,
 linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
 linux-kernel@vger.kernel.org, android-mm@google.com, kernel-team@android.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: wangkefeng.wang@huawei.com, elver@google.com, catalin.marinas@arm.com,
 ast@kernel.org, vincenzo.frascino@arm.com, will@kernel.org,
 android-mm@google.com, kvmarm@lists.cs.columbia.edu,
 madvenka@linux.microsoft.com, linux-arm-kernel@lists.infradead.org,
 andreyknvl@gmail.com, kernel-team@android.com, drjones@redhat.com,
 broonie@kernel.org, russell.king@oracle.com, linux-kernel@vger.kernel.org,
 mhiramat@kernel.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

On Fri, 15 Jul 2022 07:10:19 +0100,
Kalesh Singh <kaleshsingh@google.com> wrote:
> 
> Add some stub implementations of protected nVHE stack unwinder, for
> building. These are implemented later in this series.
> 
> Signed-off-by: Kalesh Singh <kaleshsingh@google.com>
> ---
>  arch/arm64/include/asm/stacktrace/nvhe.h | 57 ++++++++++++++++++++++++
>  arch/arm64/kvm/hyp/nvhe/stacktrace.c     |  3 +-
>  2 files changed, 58 insertions(+), 2 deletions(-)
>  create mode 100644 arch/arm64/include/asm/stacktrace/nvhe.h
> 
> diff --git a/arch/arm64/include/asm/stacktrace/nvhe.h b/arch/arm64/include/asm/stacktrace/nvhe.h
> new file mode 100644
> index 000000000000..1eac4e57f2ae
> --- /dev/null
> +++ b/arch/arm64/include/asm/stacktrace/nvhe.h
> @@ -0,0 +1,57 @@
> +/* SPDX-License-Identifier: GPL-2.0-only */
> +/*
> + * KVM nVHE hypervisor stack tracing support.
> + *
> + * The unwinder implementation depends on the nVHE mode:
> + *
> + *   1) pKVM (protected nVHE) mode - the host cannot directly access
> + *      the HYP memory. The stack is unwinded in EL2 and dumped to a shared
> + *      buffer where the host can read and print the stacktrace.
> + *
> + * Copyright (C) 2022 Google LLC
> + */
> +#ifndef __ASM_STACKTRACE_NVHE_H
> +#define __ASM_STACKTRACE_NVHE_H
> +
> +#include <asm/stacktrace/common.h>
> +
> +static inline bool on_accessible_stack(const struct task_struct *tsk,
> +				       unsigned long sp, unsigned long size,
> +				       struct stack_info *info)
> +{
> +	return false;
> +}
> +
> +/*
> + * Protected nVHE HYP stack unwinder
> + */
> +#ifdef __KVM_NVHE_HYPERVISOR__
> +
> +#ifdef CONFIG_PROTECTED_NVHE_STACKTRACE
> +static inline bool on_overflow_stack(unsigned long sp, unsigned long size,
> +				     struct stack_info *info)
> +{
> +	return false;
> +}
> +
> +static int notrace unwind_next(struct unwind_state *state)
> +{
> +	return 0;
> +}
> +NOKPROBE_SYMBOL(unwind_next);

I find this rather dodgy. It means that every compilation unit that
(indirectly) drags this include file may end-up with an 'unwind_next'
function. At best this will be eliminated at compilation time, but it
may also generate a warning.

Why can't this me made an 'inline' function? At the very least, it
should have a __maybe_unused attribute.

> +#else	/* !CONFIG_PROTECTED_NVHE_STACKTRACE */
> +static inline bool on_overflow_stack(unsigned long sp, unsigned long size,
> +				     struct stack_info *info)
> +{
> +	return false;
> +}
> +
> +static int notrace unwind_next(struct unwind_state *state)
> +{
> +	return 0;
> +}
> +NOKPROBE_SYMBOL(unwind_next);

Same thing here.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
