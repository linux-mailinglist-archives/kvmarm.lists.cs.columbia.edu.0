Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 1AFEA45F51E
	for <lists+kvmarm@lfdr.de>; Fri, 26 Nov 2021 20:20:41 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 3C7694B168;
	Fri, 26 Nov 2021 14:20:40 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: 0.909
X-Spam-Level: 
X-Spam-Status: No, score=0.909 required=6.1 tests=[BAYES_00=-1.9,
	DKIM_SIGNED=0.1, DNS_FROM_AHBL_RHSBL=2.699, T_DKIM_INVALID=0.01]
	autolearn=unavailable
Authentication-Results: mm01.cs.columbia.edu (amavisd-new); dkim=softfail
	(fail, message has been altered) header.i=@kernel.org
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id SXA-2YFEPWTt; Fri, 26 Nov 2021 14:20:40 -0500 (EST)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 8DF5B4B15A;
	Fri, 26 Nov 2021 14:20:38 -0500 (EST)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id E5EFF4B10C
 for <kvmarm@lists.cs.columbia.edu>; Fri, 26 Nov 2021 14:20:36 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 8U9BXBuL193c for <kvmarm@lists.cs.columbia.edu>;
 Fri, 26 Nov 2021 14:20:35 -0500 (EST)
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id EFEBC4B0BE
 for <kvmarm@lists.cs.columbia.edu>; Fri, 26 Nov 2021 14:20:34 -0500 (EST)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by dfw.source.kernel.org (Postfix) with ESMTPS id 2B9136228F;
 Fri, 26 Nov 2021 19:20:34 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 8AC0CC9305B;
 Fri, 26 Nov 2021 19:20:33 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1637954433;
 bh=b4ceXi12eQFeD9SQyB33k+v/3V5HDj3nrFEEY/5rQ7Q=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=mur7Eb9no6YVYgVXz4a4eopodX5xLPlShGoFLKct7JKiR8Mn8/LI4+BdMh+XZr1vq
 USOoNQFp7bitbLZD5w+Wi4dU2ZeASanoNRy5EO0dOxxo+YD0RxdaszjHhoYjWuP6S9
 ZVLzCDdVcTrWRQcfnrU8BvVhpw1bK7FBCj8N8wmF/GQX0Ncgayj0m2kdnkjP4rnv1g
 15CH79SpS1UzMz7+nVMQTLgBht4O+XgLYHgXV18Kq8xt8/EPW/isfy+CljZsKp+EnD
 TaXY3NkleeeDrHq7jQ8qHa/CTSYUebVD8kvL1NkKLKQsDV4P56pFACLvJjBP/AVuv+
 QjFZ+WyLMlUpA==
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.94.2)
 (envelope-from <maz@kernel.org>)
 id 1mqglr-008BAX-F7; Fri, 26 Nov 2021 19:20:31 +0000
Date: Fri, 26 Nov 2021 19:20:31 +0000
Message-ID: <87bl26bu68.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>
Subject: Re: [PATCH 2/2] KVM: arm64: nv: fixup! Support multiple nested
 Stage-2 mmu structures
In-Reply-To: <a32b4390-a735-783f-9351-a71334d67572@os.amperecomputing.com>
References: <20211122095803.28943-1-gankulkarni@os.amperecomputing.com>
 <20211122095803.28943-3-gankulkarni@os.amperecomputing.com>
 <877dcwco1m.wl-maz@kernel.org>
 <a32b4390-a735-783f-9351-a71334d67572@os.amperecomputing.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: gankulkarni@os.amperecomputing.com, catalin.marinas@arm.com,
 will@kernel.org, andre.przywara@arm.com, linux-arm-kernel@lists.infradead.org,
 kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org,
 darren@os.amperecomputing.com, scott@os.amperecomputing.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: D Scott Phillips <scott@os.amperecomputing.com>, kvm@vger.kernel.org,
 catalin.marinas@arm.com, darren@os.amperecomputing.com, andre.przywara@arm.com,
 will@kernel.org, kvmarm@lists.cs.columbia.edu,
 linux-arm-kernel@lists.infradead.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

[resending after having sorted my email config]

On Fri, 26 Nov 2021 05:59:00 +0000,
Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com> wrote:
> 
> Hi Marc,
> 
> On 25-11-2021 07:53 pm, Marc Zyngier wrote:
> > On Mon, 22 Nov 2021 09:58:03 +0000,
> > Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com> wrote:
> >> 
> >> Commit 1776c91346b6 ("KVM: arm64: nv: Support multiple nested Stage-2 mmu
> >> structures")[1] added a function kvm_vcpu_init_nested which expands the
> >> stage-2 mmu structures array when ever a new vCPU is created. The array
> >> is expanded using krealloc() and results in a stale mmu address pointer
> >> in pgt->mmu. Adding a fix to update the pointer with the new address after
> >> successful krealloc.
> >> 
> >> [1] https://git.kernel.org/pub/scm/linux/kernel/git/maz/arm-platforms.git/
> >> branch kvm-arm64/nv-5.13
> >> 
> >> Signed-off-by: Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>
> >> ---
> >>   arch/arm64/kvm/nested.c | 9 +++++++++
> >>   1 file changed, 9 insertions(+)
> >> 
> >> diff --git a/arch/arm64/kvm/nested.c b/arch/arm64/kvm/nested.c
> >> index 4ffbc14d0245..57ad8d8f4ee5 100644
> >> --- a/arch/arm64/kvm/nested.c
> >> +++ b/arch/arm64/kvm/nested.c
> >> @@ -68,6 +68,8 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
> >>   		       num_mmus * sizeof(*kvm->arch.nested_mmus),
> >>   		       GFP_KERNEL | __GFP_ZERO);
> >>   	if (tmp) {
> >> +		int i;
> >> +
> >>   		if (kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 1]) ||
> >>   		    kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 2])) {
> >>   			kvm_free_stage2_pgd(&tmp[num_mmus - 1]);
> >> @@ -80,6 +82,13 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
> >>   		}
> >>     		kvm->arch.nested_mmus = tmp;
> >> +
> >> +		/* Fixup pgt->mmu after krealloc */
> >> +		for (i = 0; i < kvm->arch.nested_mmus_size; i++) {
> >> +			struct kvm_s2_mmu *mmu = &kvm->arch.nested_mmus[i];
> >> +
> >> +			mmu->pgt->mmu = mmu;
> >> +		}
> >>   	}
> >>     	mutex_unlock(&kvm->lock);
> > 
> > Another good catch. I've tweaked a bit to avoid some unnecessary
> > repainting, see below.
> > 
> > Thanks again,
> > 
> > 	M.
> > 
> > diff --git a/arch/arm64/kvm/nested.c b/arch/arm64/kvm/nested.c
> > index a4dfffa1dae0..92b225db59ac 100644
> > --- a/arch/arm64/kvm/nested.c
> > +++ b/arch/arm64/kvm/nested.c
> > @@ -66,8 +66,19 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
> >   	num_mmus = atomic_read(&kvm->online_vcpus) * 2;
> >   	tmp = krealloc(kvm->arch.nested_mmus,
> >   		       num_mmus * sizeof(*kvm->arch.nested_mmus),
> > -		       GFP_KERNEL | __GFP_ZERO);
> > +		       GFP_KERNEL_ACCOUNT | __GFP_ZERO);
> >   	if (tmp) {
> > +		/*
> > +		 * If we went through a realocation, adjust the MMU
> 
> Is it more precise to say?
> > +		 * back-pointers in the pg_table structures.
> * back-pointers in the pg_table structures of previous inits.

Yes. I have added something along those lines.

> > +		 */
> > +		if (kvm->arch.nested_mmus != tmp) {
> > +			int i;
> > +
> > +			for (i = 0; i < num_mms - 2; i++)
> > +				tmp[i].pgt->mmu = &tmp[i];
> > +		}
> 
> Thanks for this optimization, it saves 2 redundant iterations.
> > +
> >   		if (kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 1]) ||
> >   		    kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 2])) {
> >   			kvm_free_stage2_pgd(&tmp[num_mmus - 1]);
> > 
> 
> Feel free to add,
> Reviewed-by: Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>

Given that this was a fixup, I haven't taken this tag. I will Cc you
on the whole series, and you can give you tag on the whole patch if
you are happy with it.

BTW, I have now fixed the bug that was preventing L2 userspace from
running (bad interaction with the pgtable code which was unhappy about
my use of the SW bits when relaxing the permissions). You should now
be able to test the whole series.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
