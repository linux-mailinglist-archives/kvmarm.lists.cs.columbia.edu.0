Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id A8D083F71B2
	for <lists+kvmarm@lfdr.de>; Wed, 25 Aug 2021 11:27:20 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 176194B253;
	Wed, 25 Aug 2021 05:27:20 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -4.201
X-Spam-Level: 
X-Spam-Status: No, score=-4.201 required=6.1 tests=[BAYES_00=-1.9,
	DNS_FROM_AHBL_RHSBL=2.699, RCVD_IN_DNSWL_HI=-5] autolearn=unavailable
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id VpLMtZBQmpyr; Wed, 25 Aug 2021 05:27:19 -0400 (EDT)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 300624B254;
	Wed, 25 Aug 2021 05:27:16 -0400 (EDT)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id C13804B1F3
 for <kvmarm@lists.cs.columbia.edu>; Wed, 25 Aug 2021 05:27:14 -0400 (EDT)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id ig1Eb1dTU-a3 for <kvmarm@lists.cs.columbia.edu>;
 Wed, 25 Aug 2021 05:27:13 -0400 (EDT)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mm01.cs.columbia.edu (Postfix) with ESMTPS id 874424B1D4
 for <kvmarm@lists.cs.columbia.edu>; Wed, 25 Aug 2021 05:27:13 -0400 (EDT)
Received: from disco-boy.misterjones.org (disco-boy.misterjones.org
 [51.254.78.96])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 9A62061100;
 Wed, 25 Aug 2021 09:27:12 +0000 (UTC)
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
 by disco-boy.misterjones.org with esmtpsa (TLS1.3) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.94.2)
 (envelope-from <maz@kernel.org>)
 id 1mIpBe-0076Pu-J0; Wed, 25 Aug 2021 10:27:10 +0100
Date: Wed, 25 Aug 2021 10:27:10 +0100
Message-ID: <87mtp5q3gx.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Oliver Upton <oupton@google.com>
Subject: Re: KVM/arm64: Guest ABI changes do not appear rollback-safe
In-Reply-To: <YSVhV+UIMY12u2PW@google.com>
References: <YSVhV+UIMY12u2PW@google.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: oupton@google.com, kvmarm@lists.cs.columbia.edu,
 pshier@google.com, ricarkol@google.com, rananta@google.com, reijiw@google.com,
 jingzhangos@google.com, kvm@vger.kernel.org,
 linux-arm-kernel@lists.infradead.org, james.morse@arm.com,
 alexandru.elisei@arm.com, suzuki.poulose@arm.com, drjones@redhat.com,
 peter.maydell@linaro.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org);
 SAEximRunCond expanded to false
Cc: kvm@vger.kernel.org, pshier@google.com, kvmarm@lists.cs.columbia.edu,
 linux-arm-kernel@lists.infradead.org
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

Hi Oliver,

Adding Andrew and Peter to the discussion.

On Tue, 24 Aug 2021 22:15:03 +0100,
Oliver Upton <oupton@google.com> wrote:
> 
> Hey folks,
> 
> Ricardo and I were discussing hypercall support in KVM/arm64 and
> something seems to be a bit problematic. I do not see anywhere that KVM
> requires opt-in from the VMM to expose new hypercalls to the guest. To
> name a few, the TRNG and KVM PTP hypercalls are unconditionally provided
> to the guest.
> 
> Exposing new hypercalls to guests in this manner seems very unsafe to
> me. Suppose an operator is trying to upgrade from kernel N to kernel
> N+1, which brings in the new 'widget' hypercall. Guests are live
> migrated onto the N+1 kernel, but the operator finds a defect that
> warrants a kernel rollback. VMs are then migrated from kernel N+1 -> N.
> Any guests that discovered the 'widget' hypercall are likely going to
> get fussy _very_ quickly on the old kernel.

This goes against what we decided to support for the *only* publicly
available VMM that cares about save/restore, which is that we only
move forward and don't rollback. Hypercalls are the least of your
worries, and there is a whole range of other architectural features
that will have also appeared/disappeared (your own CNTPOFF series is a
glaring example of this).

I appreciate that you may have different considerations, but I felt
that it was important to state *why* this is the way it is.

> 
> Really, we need to ensure that the exposed guest ABI is
> backwards-compatible. Running a VMM that is blissfully unaware of the
> 'widget' hypercall should not implicitly expose it to its guest on a new
> kernel.
> 
> This conversation was in the context of devising a new UAPI that allows
> VMMs to trap hypercalls to userspace. While such an interface would
> easily work around the issue, the onus of ABI compatibility lies with
> the kernel.
> 
> So, this is all a long-winded way of asking: how do we dig ourselves out
> of this situation, and how to we avoid it happening again in the future?
> I believe the answer to both is to have new VM capabilities for sets of
> hypercalls exposed to the guest. Unfortunately, the unconditional
> exposure of TRNG and PTP hypercalls is ABI now, so we'd have to provide
> an opt-out at this point. For anything new, require opt-in from the VMM
> before we give it to the guest.
>
> Have I missed something blatantly obvious, or do others see this as an
> issue as well? I'll reply with an example of adding opt-out for PTP.
> I'm sure other hypercalls could be handled similarly.

Why do we need this? For future hypercalls, we could have some buy-in
capabilities. For existing ones, it is too late, and negative features
are just too horrible.

For KVM-specific hypercalls, we could get the VMM to save/restore the
bitmap of supported functions. That would be "less horrible". This
could be implemented using extra "firmware pseudo-registers" such as
the ones described in Documentation/virt/kvm/arm/psci.rst.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
_______________________________________________
kvmarm mailing list
kvmarm@lists.cs.columbia.edu
https://lists.cs.columbia.edu/mailman/listinfo/kvmarm
