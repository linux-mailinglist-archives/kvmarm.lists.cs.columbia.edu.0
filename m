Return-Path: <kvmarm-bounces@lists.cs.columbia.edu>
X-Original-To: lists+kvmarm@lfdr.de
Delivered-To: lists+kvmarm@lfdr.de
Received: from mm01.cs.columbia.edu (mm01.cs.columbia.edu [128.59.11.253])
	by mail.lfdr.de (Postfix) with ESMTP id 474CC2C866E
	for <lists+kvmarm@lfdr.de>; Mon, 30 Nov 2020 15:18:22 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id C9D624D517;
	Mon, 30 Nov 2020 09:18:21 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
X-Spam-Flag: NO
X-Spam-Score: -1.501
X-Spam-Level: 
X-Spam-Status: No, score=-1.501 required=6.1 tests=[BAYES_00=-1.9,
	DNS_FROM_AHBL_RHSBL=2.699, RCVD_IN_DNSWL_MED=-2.3]
	autolearn=unavailable
Received: from mm01.cs.columbia.edu ([127.0.0.1])
	by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id hK-TbAzKwuLy; Mon, 30 Nov 2020 09:18:21 -0500 (EST)
Received: from mm01.cs.columbia.edu (localhost [127.0.0.1])
	by mm01.cs.columbia.edu (Postfix) with ESMTP id 73F414D515;
	Mon, 30 Nov 2020 09:18:20 -0500 (EST)
Received: from localhost (localhost [127.0.0.1])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id 907614D511
 for <kvmarm@lists.cs.columbia.edu>; Mon, 30 Nov 2020 09:18:18 -0500 (EST)
X-Virus-Scanned: at lists.cs.columbia.edu
Received: from mm01.cs.columbia.edu ([127.0.0.1])
 by localhost (mm01.cs.columbia.edu [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id gYXtgf+BqBVq for <kvmarm@lists.cs.columbia.edu>;
 Mon, 30 Nov 2020 09:18:16 -0500 (EST)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
 by mm01.cs.columbia.edu (Postfix) with ESMTP id AE5294B660
 for <kvmarm@lists.cs.columbia.edu>; Mon, 30 Nov 2020 09:18:16 -0500 (EST)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 4D7D5D6E;
 Mon, 30 Nov 2020 06:18:16 -0800 (PST)
Received: from [10.37.12.38] (unknown [10.37.12.38])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 4923C3F71F;
 Mon, 30 Nov 2020 06:18:15 -0800 (PST)
Subject: Re: [kvm-unit-tests PATCH 10/10] arm64: gic: Use IPI test checking
 for the LPI tests
To: Zenghui Yu <yuzenghui@huawei.com>, kvm@vger.kernel.org,
 kvmarm@lists.cs.columbia.edu, drjones@redhat.com
References: <20201125155113.192079-1-alexandru.elisei@arm.com>
 <20201125155113.192079-11-alexandru.elisei@arm.com>
 <a7069b1d-ef11-7504-644c-8d341fa2aabc@huawei.com>
 <fd32d075-c6a9-a869-14a9-2c29f41d3318@arm.com>
 <49be46a8-2c29-b805-366e-7c955d395874@huawei.com>
From: Alexandru Elisei <alexandru.elisei@arm.com>
Message-ID: <eb8f5df2-6ea5-7aad-344a-70fcef3adad8@arm.com>
Date: Mon, 30 Nov 2020 14:19:37 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101
 Thunderbird/78.4.3
MIME-Version: 1.0
In-Reply-To: <49be46a8-2c29-b805-366e-7c955d395874@huawei.com>
Content-Language: en-US
Cc: andre.przywara@arm.com
X-BeenThere: kvmarm@lists.cs.columbia.edu
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Where KVM/ARM decisions are made <kvmarm.lists.cs.columbia.edu>
List-Unsubscribe: <https://lists.cs.columbia.edu/mailman/options/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=unsubscribe>
List-Archive: <https://lists.cs.columbia.edu/pipermail/kvmarm>
List-Post: <mailto:kvmarm@lists.cs.columbia.edu>
List-Help: <mailto:kvmarm-request@lists.cs.columbia.edu?subject=help>
List-Subscribe: <https://lists.cs.columbia.edu/mailman/listinfo/kvmarm>,
 <mailto:kvmarm-request@lists.cs.columbia.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: kvmarm-bounces@lists.cs.columbia.edu
Sender: kvmarm-bounces@lists.cs.columbia.edu

SGkgWmVuZ2h1aSwKCk9uIDExLzMwLzIwIDE6NTkgUE0sIFplbmdodWkgWXUgd3JvdGU6Cj4gSGkg
QWxleCwKPgo+IE9uIDIwMjAvMTEvMjcgMjI6NTAsIEFsZXhhbmRydSBFbGlzZWkgd3JvdGU6Cj4+
IEhpIFpoZW5naHVpLAo+Pgo+PiBUaGFuayB5b3UgZm9yIGhhdmluZyBhIGxvb2sgYXQgdGhpcyEK
Pj4KPj4gT24gMTEvMjYvMjAgOTozMCBBTSwgWmVuZ2h1aSBZdSB3cm90ZToKPj4+IE9uIDIwMjAv
MTEvMjUgMjM6NTEsIEFsZXhhbmRydSBFbGlzZWkgd3JvdGU6Cj4+Pj4gVGhlIHJlYXNvbiBmb3Ig
dGhlIGZhaWx1cmUgaXMgdGhhdCB0aGUgdGVzdCAiZGV2Mi9ldmVudGlkPTIwIG5vdyB0cmlnZ2Vy
cwo+Pj4+IGFuIExQSSIgdHJpZ2dlcnMgMiBMUElzLCBub3Qgb25lLiBUaGlzIGJlaGF2aW9yIHdh
cyBwcmVzZW50IGJlZm9yZSB0aGlzCj4+Pj4gcGF0Y2gsIGJ1dCBpdCB3YXMgaWdub3JlZCBiZWNh
dXNlIGNoZWNrX2xwaV9zdGF0cygpIHdhc24ndCBsb29raW5nIGF0IHRoZQo+Pj4+IGFja2VkIGFy
cmF5Lgo+Pj4+Cj4+Pj4gSSdtIG5vdCBmYW1pbGlhciB3aXRoIHRoZSBJVFMgc28gSSdtIG5vdCBz
dXJlIGlmIHRoaXMgaXMgZXhwZWN0ZWQsIGlmIHRoZQo+Pj4+IHRlc3QgaXMgaW5jb3JyZWN0IG9y
IGlmIHRoZXJlIGlzIHNvbWV0aGluZyB3cm9uZyB3aXRoIEtWTSBlbXVsYXRpb24uCj4+Pgo+Pj4g
SSB0aGluayB0aGlzIGlzIGV4cGVjdGVkLCBvciBub3QuCj4+Pgo+Pj4gQmVmb3JlIElOVkFMTCwg
dGhlIExQSS04MTk1IHdhcyBhbHJlYWR5IHBlbmRpbmcgYnV0IGRpc2FibGVkLiBPbgo+Pj4gcmVj
ZWl2aW5nIElOVkFMTCwgVkdJQyB3aWxsIHJlbG9hZCBjb25maWd1cmF0aW9uIGZvciBhbGwgTFBJ
cyB0YXJnZXRpbmcKPj4+IGNvbGxlY3Rpb24tMyBhbmQgZGVsaXZlciB0aGUgbm93IGVuYWJsZWQg
TFBJLTgxOTUuIFdlJ2xsIHRoZXJlZm9yZSBzZWUKPj4+IGFuZCBoYW5kbGUgaXQgYmVmb3JlIHNl
bmRpbmcgdGhlIGZvbGxvd2luZyBJTlQgKHdoaWNoIHdpbGwgc2V0IHRoZQo+Pj4gTFBJLTgxOTUg
cGVuZGluZyBhZ2FpbikuCj4+Pgo+Pj4+IERpZCBzb21lIG1vcmUgdGVzdGluZyBvbiBhbiBBbXBl
cmUgZU1BRyAoZmFzdCBvdXQtb2Ytb3JkZXIgY29yZXMpIHVzaW5nCj4+Pj4gcWVtdSBhbmQga3Zt
dG9vbCBhbmQgTGludXggdjUuOCwgaGVyZSdzIHdoYXQgSSBmb3VuZDoKPj4+Pgo+Pj4+IC0gVXNp
bmcgcWVtdSBhbmQgZ2ljLmZsYXQgYnVpbHQgZnJvbSptYXN0ZXIqOiBlcnJvciBlbmNvdW50ZXJl
ZCA4NjQgdGltZXMKPj4+PiDCoMKgwqAgb3V0IG9mIDEwODggcnVucy4KPj4+PiAtIFVzaW5nIHFl
bXU6IGVycm9yIGVuY291bnRlcmVkIDg1MiB0aW1lcyBvdXQgb2YgMTAyNyBydW5zLgo+Pj4+IC0g
VXNpbmcga3ZtdG9vbDogZXJyb3IgZW5jb3VudGVyZWQgODE2NCB0aW1lcyBvdXQgb2YgMTA2MDIg
cnVucy4KPj4+Cj4+PiBJZiB2Y3B1LTMgaGFkbid0IHNlZW4gYW5kIGhhbmRsZWQgTFBJLTgxOTUg
YXMgcXVpY2tseSBhcyBwb3NzaWJsZSAoZS5nLiwKPj4+IHZjcHUtMyBoYWRuJ3QgYmVlbiBzY2hl
ZHVsZWQpLCB0aGUgZm9sbG93aW5nIElOVCB3aWxsIHNldCB0aGUgYWxyZWFkeQo+Pj4gcGVuZGlu
ZyBMUEktODE5NSBwZW5kaW5nIGFnYWluIGFuZCB3ZSdsbCByZWNlaXZlIGl0ICpvbmNlKiBvbiB2
Y3B1LTMuCj4+PiBBbmQgd2Ugd29uJ3Qgc2VlIHRoZSBtZW50aW9uZWQgZmFpbHVyZS4KPj4+Cj4+
PiBJIHRoaW5rIHdlIGNhbiBqdXN0IGRyb3AgdGhlIChtZWFuaW5nbGVzcyBhbmQgY29uZnVzaW5n
PykgSU5ULgo+Pgo+PiBJIHRoaW5rIEkgdW5kZXJzdGFuZCB5b3VyIGV4cGxhbmF0aW9uLCB0aGUg
VkNQVSB0YWtlcyB0aGUgaW50ZXJydXB0IGltbWVkaWF0ZWx5Cj4+IGFmdGVyIHRoZSBJTlZBTEwg
YW5kIGJlZm9yZSB0aGUgSU5ULCBhbmQgdGhlIHNlY29uZCBpbnRlcnJ1cHQgdGhhdCBJIGFtIHNl
ZWluZyBpcwo+PiB0aGUgb25lIGNhdXNlZCBieSB0aGUgSU5UIGNvbW1hbmQuCj4KPiBZZXMuCj4K
Pj4gSSB0cmllZCBtb2RpZnlpbmcgdGhlIHRlc3QgbGlrZSB0aGlzOgo+Pgo+PiBkaWZmIC0tZ2l0
IGEvYXJtL2dpYy5jIGIvYXJtL2dpYy5jCj4+IGluZGV4IDZlOTNkYTgwZmUwZC4uMGVmOGMxMmVh
MjM0IDEwMDY0NAo+PiAtLS0gYS9hcm0vZ2ljLmMKPj4gKysrIGIvYXJtL2dpYy5jCj4+IEBAIC03
NjEsMTAgKzc2MSwxNyBAQCBzdGF0aWMgdm9pZCB0ZXN0X2l0c190cmlnZ2VyKHZvaWQpCj4+IMKg
wqDCoMKgwqDCoMKgwqAgd21iKCk7Cj4+IMKgwqDCoMKgwqDCoMKgwqAgY3B1bWFza19jbGVhcigm
bWFzayk7Cj4+IMKgwqDCoMKgwqDCoMKgwqAgY3B1bWFza19zZXRfY3B1KDMsICZtYXNrKTsKPj4g
LcKgwqDCoMKgwqDCoCBpdHNfc2VuZF9pbnQoZGV2MiwgMjApOwo+Cj4gU2hvdWxkbid0IGl0c19z
ZW5kX2ludmFsbChjb2wzKSBiZSBtb3ZlZCBkb3duIGhlcmU/IFNlZSBiZWxvdy4KPgo+PiDCoMKg
wqDCoMKgwqDCoMKgIHdhaXRfZm9yX2ludGVycnVwdHMoJm1hc2spOwo+PiDCoMKgwqDCoMKgwqDC
oMKgIHJlcG9ydChjaGVja19hY2tlZCgmbWFzaywgMCwgODE5NSksCj4+IC3CoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAiZGV2Mi9ldmVudGlkPTIwIG5vdyB0cmln
Z2VycyBhbiBMUEkiKTsKPj4gK8KgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKg
wqDCoMKgICJkZXYyL2V2ZW50aWQ9MjAgcGVuZGluZyBMUEkgaXMgcmVjZWl2ZWQiKTsKPj4gKwo+
PiArwqDCoMKgwqDCoMKgIHN0YXRzX3Jlc2V0KCk7Cj4+ICvCoMKgwqDCoMKgwqAgd21iKCk7Cj4+
ICvCoMKgwqDCoMKgwqAgY3B1bWFza19jbGVhcigmbWFzayk7Cj4+ICvCoMKgwqDCoMKgwqAgY3B1
bWFza19zZXRfY3B1KDMsICZtYXNrKTsKPj4gK8KgwqDCoMKgwqDCoCBpdHNfc2VuZF9pbnQoZGV2
MiwgMjApOwo+PiArwqDCoMKgwqDCoMKgIHdhaXRfZm9yX2ludGVycnVwdHMoJm1hc2spOwo+PiAr
wqDCoMKgwqDCoMKgIHJlcG9ydChjaGVja19hY2tlZCgmbWFzaywgMCwgODE5NSksICJkZXYyL2V2
ZW50aWQ9MjAgdHJpZ2dlcnMgYW4gTFBJIik7Cj4+IMKgIMKgwqDCoMKgwqDCoMKgwqAgcmVwb3J0
X3ByZWZpeF9wb3AoKTsKPj4gwqAgSSByZW1vdmVkIHRoZSBJTlQgZnJvbSB0aGUgaW5pdGlhbCB0
ZXN0LCBhbmQgYWRkZWQgYSBzZXBhcmF0ZSBvbmUgdG8gY2hlY2sgdGhhdAo+PiB0aGUgSU5UIGNv
bW1hbmQgc3RpbGwgd29ya3MuIFRoYXQgbG9va3MgdG8gbWUgdGhhdCBwcmVzZXJ2ZXMgdGhlIHNw
aXJpdCBvZiB0aGUKPj4gb3JpZ2luYWwgdGVzdC4gQWZ0ZXIgZG9pbmcgc3RyZXNzIHRlc3Rpbmcg
dGhpcyBpcyB3aGF0IEkgZ290Ogo+Pgo+PiAtIHdpdGgga3ZtdG9vbCwgNDcsNzA5IGl0ZXJhdGlv
bnMsIDI3IHRpbWVzIHRoZSB0ZXN0IHRpbWVkIG91dCB3aGVuIHdhaXRpbmcgZm9yCj4+IHRoZSBp
bnRlcnJ1cHQgYWZ0ZXIgSU5WQUxMLgo+PiAtIHdpdGggcWVtdSwgMTUsNTExIGl0ZXJhdGlvbnMs
IDI1OCB0aW1lcyB0aGUgdGVzdCB0aW1lZCBvdXQgd2hlbiB3YWl0aW5nIGZvciB0aGUKPj4gaW50
ZXJydXB0IGFmdGVyIElOVkFMTCwganVzdCBsaWtlIHdpdGgga3ZtdG9vbC4KPgo+IEkgZ3Vlc3Mg
dGhlIHJlYXNvbiBvZiBmYWlsdXJlIGlzIHRoYXQgdGhlIExQSSBpcyB0YWtlbiAqaW1tZWRpYXRl
bHkqCj4gYWZ0ZXIgdGhlIElOVkFMTD8KPgo+IMKgwqDCoMKgLyogTm93IGNhbGwgdGhlIGludmFs
bCBhbmQgY2hlY2sgdGhlIExQSSBoaXRzICovCj4gwqDCoMKgwqBpdHNfc2VuZF9pbnZhbGwoY29s
Myk7Cj4gwqDCoMKgwqDCoMKgwqAgPC0gTFBJIGlzIHRha2VuLCBhY2tlZFtdKysKPiDCoMKgwqDC
oHN0YXRzX3Jlc2V0KCk7Cj4gwqDCoMKgwqDCoMKgwqAgPC0gYWNrZWRbXSBpcyBjbGVhcmVkIHVu
ZXhwZWN0ZWRseQo+IMKgwqDCoMKgd21iKCk7Cj4gwqDCoMKgwqBjcHVtYXNrX2NsZWFyKCZtYXNr
KTsKPiDCoMKgwqDCoGNwdW1hc2tfc2V0X2NwdSgzLCAmbWFzayk7Cj4gwqDCoMKgwqB3YWl0X2Zv
cl9pbnRlcnJ1cHRzKCZtYXNrKTsKPiDCoMKgwqDCoMKgwqDCoCA8LSB3ZSdsbCBoaXQgdGltZWQt
b3V0IHNpbmNlIGFja2VkW10gaXMgMAoKWWVzLCBvZiBjb3Vyc2UsIHlvdSdyZSByaWdodCwgSSBk
aWRuJ3QgcmVhbGl6ZSB0aGF0IEkgd2FzIHJlc2V0dGluZyB0aGUgc3RhdHMKKmFmdGVyKiB0aGUg
aW50ZXJydXB0IHdhcyBlbmFibGVkLiBUaGlzIGFsc28gZXhwbGFpbnMgd2h5IEkgd2FzIHN0aWxs
IHNlZWluZwp0aW1lb3V0cyBldmVuIHdoZW4gdGhlIHRpbWVvdXQgZHVyYXRpb24gd2FzIHNldCB0
byA1MCBzZWNvbmRzLiBJJ2xsIHJldGVzdCB3aXRoCnRoZSBmaXg6CgpkaWZmIC0tZ2l0IGEvYXJt
L2dpYy5jIGIvYXJtL2dpYy5jCmluZGV4IDZlOTNkYTgwZmUwZC4uYzQyNDBmNWFiYTM5IDEwMDY0
NAotLS0gYS9hcm0vZ2ljLmMKKysrIGIvYXJtL2dpYy5jCkBAIC03NTYsMTUgKzc1NiwyMiBAQCBz
dGF0aWMgdm9pZCB0ZXN0X2l0c190cmlnZ2VyKHZvaWQpCsKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgImRldjIvZXZlbnRpZD0yMCBzdGlsbCBkb2VzIG5vdCB0
cmlnZ2VyIGFueSBMUEkiKTsKwqAKwqDCoMKgwqDCoMKgwqAgLyogTm93IGNhbGwgdGhlIGludmFs
bCBhbmQgY2hlY2sgdGhlIExQSSBoaXRzICovCivCoMKgwqDCoMKgwqAgc3RhdHNfcmVzZXQoKTsK
K8KgwqDCoMKgwqDCoCB3bWIoKTsKK8KgwqDCoMKgwqDCoCBjcHVtYXNrX2NsZWFyKCZtYXNrKTsK
K8KgwqDCoMKgwqDCoCBjcHVtYXNrX3NldF9jcHUoMywgJm1hc2spOwrCoMKgwqDCoMKgwqDCoCBp
dHNfc2VuZF9pbnZhbGwoY29sMyk7CivCoMKgwqDCoMKgwqAgd2FpdF9mb3JfaW50ZXJydXB0cygm
bWFzayk7CivCoMKgwqDCoMKgwqAgcmVwb3J0KGNoZWNrX2Fja2VkKCZtYXNrLCAwLCA4MTk1KSwK
K8KgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgICJkZXYyL2V2ZW50
aWQ9MjAgcGVuZGluZyBMUEkgaXMgcmVjZWl2ZWQiKTsKKwrCoMKgwqDCoMKgwqDCoCBzdGF0c19y
ZXNldCgpOwrCoMKgwqDCoMKgwqDCoCB3bWIoKTsKwqDCoMKgwqDCoMKgwqAgY3B1bWFza19jbGVh
cigmbWFzayk7CsKgwqDCoMKgwqDCoMKgIGNwdW1hc2tfc2V0X2NwdSgzLCAmbWFzayk7CsKgwqDC
oMKgwqDCoMKgIGl0c19zZW5kX2ludChkZXYyLCAyMCk7CsKgwqDCoMKgwqDCoMKgIHdhaXRfZm9y
X2ludGVycnVwdHMoJm1hc2spOwotwqDCoMKgwqDCoMKgIHJlcG9ydChjaGVja19hY2tlZCgmbWFz
aywgMCwgODE5NSksCi3CoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oCAiZGV2Mi9ldmVudGlkPTIwIG5vdyB0cmlnZ2VycyBhbiBMUEkiKTsKK8KgwqDCoMKgwqDCoCBy
ZXBvcnQoY2hlY2tfYWNrZWQoJm1hc2ssIDAsIDgxOTUpLCAiZGV2Mi9ldmVudGlkMjAgdHJpZ2dl
cnMgYW4gTFBJIik7CsKgCsKgwqDCoMKgwqDCoMKgIHJlcG9ydF9wcmVmaXhfcG9wKCk7CsKgCkkg
YWxzbyBwdXNoZWQgYSBicmFuY2ggYXQgWzFdLgoKVGhhbmsgeW91IHNvIG11Y2ggZm9yIHNwb3R0
aW5nIHRoaXMhIFlvdSd2ZSBzYXZlZCBtZSAoYW5kIHByb2JhYmx5IG90aGVycykgYSBsb3QKb2Yg
dGltZSBkZWJ1Z2dpbmcuCgpbMV0gaHR0cHM6Ly9naXRsYWIuYXJtLmNvbS9saW51eC1hcm0va3Zt
LXVuaXQtdGVzdHMtYWUvLS90cmVlL2ZpeGVzMS12MgoKVGhhbmtzLApBbGV4Cl9fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmt2bWFybSBtYWlsaW5nIGxpc3QK
a3ZtYXJtQGxpc3RzLmNzLmNvbHVtYmlhLmVkdQpodHRwczovL2xpc3RzLmNzLmNvbHVtYmlhLmVk
dS9tYWlsbWFuL2xpc3RpbmZvL2t2bWFybQo=
